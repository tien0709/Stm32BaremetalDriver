
Default_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d40  08004198  08004198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004ed8  08004ed8  00001ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef8  08004ef8  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004ef8  08004ef8  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004ef8  08004ef8  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00001ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004efc  08004efc  00001efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f00  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  08004f5c  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004f5c  000021d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001232  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006a7  00000000  00000000  000032be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00003968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000127  00000000  00000000  00003b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd52  00000000  00000000  00003c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002801  00000000  00000000  00013999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055d32  00000000  00000000  0001619a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006becc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b58  00000000  00000000  0006bf10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0006ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004198 <__do_global_dtors_aux>:
 8004198:	b510      	push	{r4, lr}
 800419a:	4c05      	ldr	r4, [pc, #20]	@ (80041b0 <__do_global_dtors_aux+0x18>)
 800419c:	7823      	ldrb	r3, [r4, #0]
 800419e:	b933      	cbnz	r3, 80041ae <__do_global_dtors_aux+0x16>
 80041a0:	4b04      	ldr	r3, [pc, #16]	@ (80041b4 <__do_global_dtors_aux+0x1c>)
 80041a2:	b113      	cbz	r3, 80041aa <__do_global_dtors_aux+0x12>
 80041a4:	4804      	ldr	r0, [pc, #16]	@ (80041b8 <__do_global_dtors_aux+0x20>)
 80041a6:	f3af 8000 	nop.w
 80041aa:	2301      	movs	r3, #1
 80041ac:	7023      	strb	r3, [r4, #0]
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	2000005c 	.word	0x2000005c
 80041b4:	00000000 	.word	0x00000000
 80041b8:	08004ec0 	.word	0x08004ec0

080041bc <frame_dummy>:
 80041bc:	b508      	push	{r3, lr}
 80041be:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <frame_dummy+0x10>)
 80041c0:	b11b      	cbz	r3, 80041ca <frame_dummy+0xe>
 80041c2:	4903      	ldr	r1, [pc, #12]	@ (80041d0 <frame_dummy+0x14>)
 80041c4:	4803      	ldr	r0, [pc, #12]	@ (80041d4 <frame_dummy+0x18>)
 80041c6:	f3af 8000 	nop.w
 80041ca:	bd08      	pop	{r3, pc}
 80041cc:	00000000 	.word	0x00000000
 80041d0:	20000060 	.word	0x20000060
 80041d4:	08004ec0 	.word	0x08004ec0

080041d8 <led_init>:
#define GPIOCEN (1U<<2)
#define PIN5 (1U<<5)
#define LED_PIN PIN5
#define PIN13 (1U<<13)
#define BTN_PIN PIN13
void led_init(void){
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
	//enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80041dc:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <led_init+0x34>)
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e0:	4a0a      	ldr	r2, [pc, #40]	@ (800420c <led_init+0x34>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA5 mode to Output mode
	GPIOA->MODER |= (1<<10);
 80041e8:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <led_init+0x38>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a08      	ldr	r2, [pc, #32]	@ (8004210 <led_init+0x38>)
 80041ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<11); //MODER5 01 = set output mode to PA5 pin
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <led_init+0x38>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a05      	ldr	r2, [pc, #20]	@ (8004210 <led_init+0x38>)
 80041fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041fe:	6013      	str	r3, [r2, #0]
}
 8004200:	bf00      	nop
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	40020000 	.word	0x40020000

08004214 <button_init>:
}
void led_off(void){
	GPIOA->ODR &= ~LED_PIN;
}

void button_init(void){
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
	//enable clock access to GPIOC
	RCC->AHB1ENR |= GPIOCEN;
 8004218:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <button_init+0x34>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	4a0a      	ldr	r2, [pc, #40]	@ (8004248 <button_init+0x34>)
 800421e:	f043 0304 	orr.w	r3, r3, #4
 8004222:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PC13 mode to input mode
	GPIOC->MODER &= ~(1<<26);
 8004224:	4b09      	ldr	r3, [pc, #36]	@ (800424c <button_init+0x38>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a08      	ldr	r2, [pc, #32]	@ (800424c <button_init+0x38>)
 800422a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800422e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1<<27); //MODER13 00 = set input mode to PC13 pin
 8004230:	4b06      	ldr	r3, [pc, #24]	@ (800424c <button_init+0x38>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a05      	ldr	r2, [pc, #20]	@ (800424c <button_init+0x38>)
 8004236:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800423a:	6013      	str	r3, [r2, #0]
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40023800 	.word	0x40023800
 800424c:	40020800 	.word	0x40020800

08004250 <fpu_enable>:
#include "stm32f4xx.h"

void fpu_enable(void){
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
	/* enable floating point access: enable CP10 and CP11 full access*/
	SCB->CPACR |= (1<<20);
 8004254:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <fpu_enable+0x50>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	4a11      	ldr	r2, [pc, #68]	@ (80042a0 <fpu_enable+0x50>)
 800425c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<21);
 8004264:	4b0e      	ldr	r3, [pc, #56]	@ (80042a0 <fpu_enable+0x50>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426a:	4a0d      	ldr	r2, [pc, #52]	@ (80042a0 <fpu_enable+0x50>)
 800426c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<22);
 8004274:	4b0a      	ldr	r3, [pc, #40]	@ (80042a0 <fpu_enable+0x50>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	4a09      	ldr	r2, [pc, #36]	@ (80042a0 <fpu_enable+0x50>)
 800427c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<23);
 8004284:	4b06      	ldr	r3, [pc, #24]	@ (80042a0 <fpu_enable+0x50>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428a:	4a05      	ldr	r2, [pc, #20]	@ (80042a0 <fpu_enable+0x50>)
 800428c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <SystemInit>:
#define VECTOR_TABLE_OFFSET 0x4000

typedef void(*func_ptr)(void);

//callback of reset handler, Automatically call
void SystemInit(void){
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
	SCB->VTOR = VECTOR_TABLE_BASE_ADDRESS|VECTOR_TABLE_OFFSET;
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <SystemInit+0x14>)
 80042aa:	4a04      	ldr	r2, [pc, #16]	@ (80042bc <SystemInit+0x18>)
 80042ac:	609a      	str	r2, [r3, #8]
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00
 80042bc:	08004000 	.word	0x08004000

080042c0 <main>:


int main(){
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0

	//enable Floating point
	fpu_enable();
 80042c4:	f7ff ffc4 	bl	8004250 <fpu_enable>


	//enable timebase
	timebase_init();
 80042c8:	f000 f8f6 	bl	80044b8 <timebase_init>

	//enable led
	led_init();
 80042cc:	f7ff ff84 	bl	80041d8 <led_init>

	//enable button
	button_init();
 80042d0:	f7ff ffa0 	bl	8004214 <button_init>

	while(1){
		printf("default applicaion is running\n");
 80042d4:	4804      	ldr	r0, [pc, #16]	@ (80042e8 <main+0x28>)
 80042d6:	f000 fa5f 	bl	8004798 <puts>
		delay(1000);
 80042da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80042de:	f000 f8a9 	bl	8004434 <delay>
		printf("default applicaion is running\n");
 80042e2:	bf00      	nop
 80042e4:	e7f6      	b.n	80042d4 <main+0x14>
 80042e6:	bf00      	nop
 80042e8:	08004ed8 	.word	0x08004ed8

080042ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e00a      	b.n	8004314 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042fe:	f3af 8000 	nop.w
 8004302:	4601      	mov	r1, r0
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	60ba      	str	r2, [r7, #8]
 800430a:	b2ca      	uxtb	r2, r1
 800430c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	3301      	adds	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	dbf0      	blt.n	80042fe <_read+0x12>
  }

  return len;
 800431c:	687b      	ldr	r3, [r7, #4]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e009      	b.n	800434c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	60ba      	str	r2, [r7, #8]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3301      	adds	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	dbf1      	blt.n	8004338 <_write+0x12>
  }
  return len;
 8004354:	687b      	ldr	r3, [r7, #4]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <_close>:

int _close(int file)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004386:	605a      	str	r2, [r3, #4]
  return 0;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <_isatty>:

int _isatty(int file)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800439e:	2301      	movs	r3, #1
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043d0:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <_sbrk+0x5c>)
 80043d2:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <_sbrk+0x60>)
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043dc:	4b13      	ldr	r3, [pc, #76]	@ (800442c <_sbrk+0x64>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <_sbrk+0x64>)
 80043e6:	4a12      	ldr	r2, [pc, #72]	@ (8004430 <_sbrk+0x68>)
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <_sbrk+0x64>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d207      	bcs.n	8004408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043f8:	f000 fafc 	bl	80049f4 <__errno>
 80043fc:	4603      	mov	r3, r0
 80043fe:	220c      	movs	r2, #12
 8004400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	e009      	b.n	800441c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004408:	4b08      	ldr	r3, [pc, #32]	@ (800442c <_sbrk+0x64>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800440e:	4b07      	ldr	r3, [pc, #28]	@ (800442c <_sbrk+0x64>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	4a05      	ldr	r2, [pc, #20]	@ (800442c <_sbrk+0x64>)
 8004418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20020000 	.word	0x20020000
 8004428:	00000400 	.word	0x00000400
 800442c:	20000078 	.word	0x20000078
 8004430:	200001d0 	.word	0x200001d0

08004434 <delay>:
#define MAX_DELAY 0xffffffff

volatile uint32_t g_cur_tick;
volatile uint32_t g_cur_tick_p;

void delay(uint32_t delay){
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = get_tick();
 800443c:	f000 f818 	bl	8004470 <get_tick>
 8004440:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60fb      	str	r3, [r7, #12]

	if(wait<MAX_DELAY){
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d002      	beq.n	8004454 <delay+0x20>
		wait += TICK_FREQ;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
	}// bù sai số thời gian do thời điểm đọc tick không chính xác ngay khi vào hàm.

	while(get_tick()-tickstart<wait){}
 8004454:	bf00      	nop
 8004456:	f000 f80b 	bl	8004470 <get_tick>
 800445a:	4602      	mov	r2, r0
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	429a      	cmp	r2, r3
 8004464:	d8f7      	bhi.n	8004456 <delay+0x22>
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <get_tick>:

uint32_t get_tick(){
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004474:	b672      	cpsid	i
}
 8004476:	bf00      	nop
	__disable_irq();
	g_cur_tick_p = g_cur_tick;
 8004478:	4b06      	ldr	r3, [pc, #24]	@ (8004494 <get_tick+0x24>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a06      	ldr	r2, [pc, #24]	@ (8004498 <get_tick+0x28>)
 800447e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004480:	b662      	cpsie	i
}
 8004482:	bf00      	nop
	__enable_irq();

	return g_cur_tick_p;
 8004484:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <get_tick+0x28>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	2000007c 	.word	0x2000007c
 8004498:	20000080 	.word	0x20000080

0800449c <tick_increment>:
void tick_increment(){
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
	g_cur_tick += TICK_FREQ;
 80044a0:	4b04      	ldr	r3, [pc, #16]	@ (80044b4 <tick_increment+0x18>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	4a03      	ldr	r2, [pc, #12]	@ (80044b4 <tick_increment+0x18>)
 80044a8:	6013      	str	r3, [r2, #0]
}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	2000007c 	.word	0x2000007c

080044b8 <timebase_init>:

void timebase_init(void){
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80044bc:	b672      	cpsid	i
}
 80044be:	bf00      	nop

	/*Disable global Interrupts*/
	__disable_irq();
	/*Load the timer with the number of clock cycle per second */
    SysTick->LOAD = ONE_SEC_LOAD - 1;
 80044c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <timebase_init+0x48>)
 80044c2:	4a10      	ldr	r2, [pc, #64]	@ (8004504 <timebase_init+0x4c>)
 80044c4:	605a      	str	r2, [r3, #4]
	/*clear systick current value register */
    SysTick->VAL = 0;
 80044c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004500 <timebase_init+0x48>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
	/*select internal clock source */
    SysTick->CTRL |= CTRL_CLKSOURCE;
 80044cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <timebase_init+0x48>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004500 <timebase_init+0x48>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	6013      	str	r3, [r2, #0]
	/*Enable Interrupts*/
    SysTick->CTRL |= CTRL_TICKINT;
 80044d8:	4b09      	ldr	r3, [pc, #36]	@ (8004500 <timebase_init+0x48>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a08      	ldr	r2, [pc, #32]	@ (8004500 <timebase_init+0x48>)
 80044de:	f043 0302 	orr.w	r3, r3, #2
 80044e2:	6013      	str	r3, [r2, #0]
	/*Enable Systick*/
    SysTick->CTRL |= CTRL_ENABLE ;
 80044e4:	4b06      	ldr	r3, [pc, #24]	@ (8004500 <timebase_init+0x48>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a05      	ldr	r2, [pc, #20]	@ (8004500 <timebase_init+0x48>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044f0:	b662      	cpsie	i
}
 80044f2:	bf00      	nop
	/*Enable global Interrupts*/
	__enable_irq();

}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010
 8004504:	00f423ff 	.word	0x00f423ff

08004508 <SysTick_Handler>:

void SysTick_Handler(void){
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
	tick_increment();
 800450c:	f7ff ffc6 	bl	800449c <tick_increment>
}
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}

08004514 <Reset_Handler>:
 8004514:	480d      	ldr	r0, [pc, #52]	@ (800454c <LoopForever+0x2>)
 8004516:	4685      	mov	sp, r0
 8004518:	f7ff fec4 	bl	80042a4 <SystemInit>
 800451c:	480c      	ldr	r0, [pc, #48]	@ (8004550 <LoopForever+0x6>)
 800451e:	490d      	ldr	r1, [pc, #52]	@ (8004554 <LoopForever+0xa>)
 8004520:	4a0d      	ldr	r2, [pc, #52]	@ (8004558 <LoopForever+0xe>)
 8004522:	2300      	movs	r3, #0
 8004524:	e002      	b.n	800452c <LoopCopyDataInit>

08004526 <CopyDataInit>:
 8004526:	58d4      	ldr	r4, [r2, r3]
 8004528:	50c4      	str	r4, [r0, r3]
 800452a:	3304      	adds	r3, #4

0800452c <LoopCopyDataInit>:
 800452c:	18c4      	adds	r4, r0, r3
 800452e:	428c      	cmp	r4, r1
 8004530:	d3f9      	bcc.n	8004526 <CopyDataInit>
 8004532:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <LoopForever+0x12>)
 8004534:	4c0a      	ldr	r4, [pc, #40]	@ (8004560 <LoopForever+0x16>)
 8004536:	2300      	movs	r3, #0
 8004538:	e001      	b.n	800453e <LoopFillZerobss>

0800453a <FillZerobss>:
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	3204      	adds	r2, #4

0800453e <LoopFillZerobss>:
 800453e:	42a2      	cmp	r2, r4
 8004540:	d3fb      	bcc.n	800453a <FillZerobss>
 8004542:	f000 fa5d 	bl	8004a00 <__libc_init_array>
 8004546:	f7ff febb 	bl	80042c0 <main>

0800454a <LoopForever>:
 800454a:	e7fe      	b.n	800454a <LoopForever>
 800454c:	20020000 	.word	0x20020000
 8004550:	20000000 	.word	0x20000000
 8004554:	2000005c 	.word	0x2000005c
 8004558:	08004f00 	.word	0x08004f00
 800455c:	2000005c 	.word	0x2000005c
 8004560:	200001d0 	.word	0x200001d0

08004564 <ADC_IRQHandler>:
 8004564:	e7fe      	b.n	8004564 <ADC_IRQHandler>
	...

08004568 <std>:
 8004568:	2300      	movs	r3, #0
 800456a:	b510      	push	{r4, lr}
 800456c:	4604      	mov	r4, r0
 800456e:	e9c0 3300 	strd	r3, r3, [r0]
 8004572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004576:	6083      	str	r3, [r0, #8]
 8004578:	8181      	strh	r1, [r0, #12]
 800457a:	6643      	str	r3, [r0, #100]	@ 0x64
 800457c:	81c2      	strh	r2, [r0, #14]
 800457e:	6183      	str	r3, [r0, #24]
 8004580:	4619      	mov	r1, r3
 8004582:	2208      	movs	r2, #8
 8004584:	305c      	adds	r0, #92	@ 0x5c
 8004586:	f000 f9e7 	bl	8004958 <memset>
 800458a:	4b0d      	ldr	r3, [pc, #52]	@ (80045c0 <std+0x58>)
 800458c:	6263      	str	r3, [r4, #36]	@ 0x24
 800458e:	4b0d      	ldr	r3, [pc, #52]	@ (80045c4 <std+0x5c>)
 8004590:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004592:	4b0d      	ldr	r3, [pc, #52]	@ (80045c8 <std+0x60>)
 8004594:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004596:	4b0d      	ldr	r3, [pc, #52]	@ (80045cc <std+0x64>)
 8004598:	6323      	str	r3, [r4, #48]	@ 0x30
 800459a:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <std+0x68>)
 800459c:	6224      	str	r4, [r4, #32]
 800459e:	429c      	cmp	r4, r3
 80045a0:	d006      	beq.n	80045b0 <std+0x48>
 80045a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045a6:	4294      	cmp	r4, r2
 80045a8:	d002      	beq.n	80045b0 <std+0x48>
 80045aa:	33d0      	adds	r3, #208	@ 0xd0
 80045ac:	429c      	cmp	r4, r3
 80045ae:	d105      	bne.n	80045bc <std+0x54>
 80045b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045b8:	f000 ba46 	b.w	8004a48 <__retarget_lock_init_recursive>
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	bf00      	nop
 80045c0:	080047a9 	.word	0x080047a9
 80045c4:	080047cb 	.word	0x080047cb
 80045c8:	08004803 	.word	0x08004803
 80045cc:	08004827 	.word	0x08004827
 80045d0:	20000084 	.word	0x20000084

080045d4 <stdio_exit_handler>:
 80045d4:	4a02      	ldr	r2, [pc, #8]	@ (80045e0 <stdio_exit_handler+0xc>)
 80045d6:	4903      	ldr	r1, [pc, #12]	@ (80045e4 <stdio_exit_handler+0x10>)
 80045d8:	4803      	ldr	r0, [pc, #12]	@ (80045e8 <stdio_exit_handler+0x14>)
 80045da:	f000 b869 	b.w	80046b0 <_fwalk_sglue>
 80045de:	bf00      	nop
 80045e0:	20000000 	.word	0x20000000
 80045e4:	08004d49 	.word	0x08004d49
 80045e8:	20000010 	.word	0x20000010

080045ec <cleanup_stdio>:
 80045ec:	6841      	ldr	r1, [r0, #4]
 80045ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <cleanup_stdio+0x34>)
 80045f0:	4299      	cmp	r1, r3
 80045f2:	b510      	push	{r4, lr}
 80045f4:	4604      	mov	r4, r0
 80045f6:	d001      	beq.n	80045fc <cleanup_stdio+0x10>
 80045f8:	f000 fba6 	bl	8004d48 <_fflush_r>
 80045fc:	68a1      	ldr	r1, [r4, #8]
 80045fe:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <cleanup_stdio+0x38>)
 8004600:	4299      	cmp	r1, r3
 8004602:	d002      	beq.n	800460a <cleanup_stdio+0x1e>
 8004604:	4620      	mov	r0, r4
 8004606:	f000 fb9f 	bl	8004d48 <_fflush_r>
 800460a:	68e1      	ldr	r1, [r4, #12]
 800460c:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <cleanup_stdio+0x3c>)
 800460e:	4299      	cmp	r1, r3
 8004610:	d004      	beq.n	800461c <cleanup_stdio+0x30>
 8004612:	4620      	mov	r0, r4
 8004614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004618:	f000 bb96 	b.w	8004d48 <_fflush_r>
 800461c:	bd10      	pop	{r4, pc}
 800461e:	bf00      	nop
 8004620:	20000084 	.word	0x20000084
 8004624:	200000ec 	.word	0x200000ec
 8004628:	20000154 	.word	0x20000154

0800462c <global_stdio_init.part.0>:
 800462c:	b510      	push	{r4, lr}
 800462e:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <global_stdio_init.part.0+0x30>)
 8004630:	4c0b      	ldr	r4, [pc, #44]	@ (8004660 <global_stdio_init.part.0+0x34>)
 8004632:	4a0c      	ldr	r2, [pc, #48]	@ (8004664 <global_stdio_init.part.0+0x38>)
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	4620      	mov	r0, r4
 8004638:	2200      	movs	r2, #0
 800463a:	2104      	movs	r1, #4
 800463c:	f7ff ff94 	bl	8004568 <std>
 8004640:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004644:	2201      	movs	r2, #1
 8004646:	2109      	movs	r1, #9
 8004648:	f7ff ff8e 	bl	8004568 <std>
 800464c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004650:	2202      	movs	r2, #2
 8004652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004656:	2112      	movs	r1, #18
 8004658:	f7ff bf86 	b.w	8004568 <std>
 800465c:	200001bc 	.word	0x200001bc
 8004660:	20000084 	.word	0x20000084
 8004664:	080045d5 	.word	0x080045d5

08004668 <__sfp_lock_acquire>:
 8004668:	4801      	ldr	r0, [pc, #4]	@ (8004670 <__sfp_lock_acquire+0x8>)
 800466a:	f000 b9ee 	b.w	8004a4a <__retarget_lock_acquire_recursive>
 800466e:	bf00      	nop
 8004670:	200001c5 	.word	0x200001c5

08004674 <__sfp_lock_release>:
 8004674:	4801      	ldr	r0, [pc, #4]	@ (800467c <__sfp_lock_release+0x8>)
 8004676:	f000 b9e9 	b.w	8004a4c <__retarget_lock_release_recursive>
 800467a:	bf00      	nop
 800467c:	200001c5 	.word	0x200001c5

08004680 <__sinit>:
 8004680:	b510      	push	{r4, lr}
 8004682:	4604      	mov	r4, r0
 8004684:	f7ff fff0 	bl	8004668 <__sfp_lock_acquire>
 8004688:	6a23      	ldr	r3, [r4, #32]
 800468a:	b11b      	cbz	r3, 8004694 <__sinit+0x14>
 800468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004690:	f7ff bff0 	b.w	8004674 <__sfp_lock_release>
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <__sinit+0x28>)
 8004696:	6223      	str	r3, [r4, #32]
 8004698:	4b04      	ldr	r3, [pc, #16]	@ (80046ac <__sinit+0x2c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f5      	bne.n	800468c <__sinit+0xc>
 80046a0:	f7ff ffc4 	bl	800462c <global_stdio_init.part.0>
 80046a4:	e7f2      	b.n	800468c <__sinit+0xc>
 80046a6:	bf00      	nop
 80046a8:	080045ed 	.word	0x080045ed
 80046ac:	200001bc 	.word	0x200001bc

080046b0 <_fwalk_sglue>:
 80046b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b4:	4607      	mov	r7, r0
 80046b6:	4688      	mov	r8, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	2600      	movs	r6, #0
 80046bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046c0:	f1b9 0901 	subs.w	r9, r9, #1
 80046c4:	d505      	bpl.n	80046d2 <_fwalk_sglue+0x22>
 80046c6:	6824      	ldr	r4, [r4, #0]
 80046c8:	2c00      	cmp	r4, #0
 80046ca:	d1f7      	bne.n	80046bc <_fwalk_sglue+0xc>
 80046cc:	4630      	mov	r0, r6
 80046ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046d2:	89ab      	ldrh	r3, [r5, #12]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d907      	bls.n	80046e8 <_fwalk_sglue+0x38>
 80046d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046dc:	3301      	adds	r3, #1
 80046de:	d003      	beq.n	80046e8 <_fwalk_sglue+0x38>
 80046e0:	4629      	mov	r1, r5
 80046e2:	4638      	mov	r0, r7
 80046e4:	47c0      	blx	r8
 80046e6:	4306      	orrs	r6, r0
 80046e8:	3568      	adds	r5, #104	@ 0x68
 80046ea:	e7e9      	b.n	80046c0 <_fwalk_sglue+0x10>

080046ec <_puts_r>:
 80046ec:	6a03      	ldr	r3, [r0, #32]
 80046ee:	b570      	push	{r4, r5, r6, lr}
 80046f0:	6884      	ldr	r4, [r0, #8]
 80046f2:	4605      	mov	r5, r0
 80046f4:	460e      	mov	r6, r1
 80046f6:	b90b      	cbnz	r3, 80046fc <_puts_r+0x10>
 80046f8:	f7ff ffc2 	bl	8004680 <__sinit>
 80046fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046fe:	07db      	lsls	r3, r3, #31
 8004700:	d405      	bmi.n	800470e <_puts_r+0x22>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	0598      	lsls	r0, r3, #22
 8004706:	d402      	bmi.n	800470e <_puts_r+0x22>
 8004708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800470a:	f000 f99e 	bl	8004a4a <__retarget_lock_acquire_recursive>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	0719      	lsls	r1, r3, #28
 8004712:	d502      	bpl.n	800471a <_puts_r+0x2e>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d135      	bne.n	8004786 <_puts_r+0x9a>
 800471a:	4621      	mov	r1, r4
 800471c:	4628      	mov	r0, r5
 800471e:	f000 f8c5 	bl	80048ac <__swsetup_r>
 8004722:	b380      	cbz	r0, 8004786 <_puts_r+0x9a>
 8004724:	f04f 35ff 	mov.w	r5, #4294967295
 8004728:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800472a:	07da      	lsls	r2, r3, #31
 800472c:	d405      	bmi.n	800473a <_puts_r+0x4e>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	059b      	lsls	r3, r3, #22
 8004732:	d402      	bmi.n	800473a <_puts_r+0x4e>
 8004734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004736:	f000 f989 	bl	8004a4c <__retarget_lock_release_recursive>
 800473a:	4628      	mov	r0, r5
 800473c:	bd70      	pop	{r4, r5, r6, pc}
 800473e:	2b00      	cmp	r3, #0
 8004740:	da04      	bge.n	800474c <_puts_r+0x60>
 8004742:	69a2      	ldr	r2, [r4, #24]
 8004744:	429a      	cmp	r2, r3
 8004746:	dc17      	bgt.n	8004778 <_puts_r+0x8c>
 8004748:	290a      	cmp	r1, #10
 800474a:	d015      	beq.n	8004778 <_puts_r+0x8c>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	6022      	str	r2, [r4, #0]
 8004752:	7019      	strb	r1, [r3, #0]
 8004754:	68a3      	ldr	r3, [r4, #8]
 8004756:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800475a:	3b01      	subs	r3, #1
 800475c:	60a3      	str	r3, [r4, #8]
 800475e:	2900      	cmp	r1, #0
 8004760:	d1ed      	bne.n	800473e <_puts_r+0x52>
 8004762:	2b00      	cmp	r3, #0
 8004764:	da11      	bge.n	800478a <_puts_r+0x9e>
 8004766:	4622      	mov	r2, r4
 8004768:	210a      	movs	r1, #10
 800476a:	4628      	mov	r0, r5
 800476c:	f000 f85f 	bl	800482e <__swbuf_r>
 8004770:	3001      	adds	r0, #1
 8004772:	d0d7      	beq.n	8004724 <_puts_r+0x38>
 8004774:	250a      	movs	r5, #10
 8004776:	e7d7      	b.n	8004728 <_puts_r+0x3c>
 8004778:	4622      	mov	r2, r4
 800477a:	4628      	mov	r0, r5
 800477c:	f000 f857 	bl	800482e <__swbuf_r>
 8004780:	3001      	adds	r0, #1
 8004782:	d1e7      	bne.n	8004754 <_puts_r+0x68>
 8004784:	e7ce      	b.n	8004724 <_puts_r+0x38>
 8004786:	3e01      	subs	r6, #1
 8004788:	e7e4      	b.n	8004754 <_puts_r+0x68>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	6022      	str	r2, [r4, #0]
 8004790:	220a      	movs	r2, #10
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e7ee      	b.n	8004774 <_puts_r+0x88>
	...

08004798 <puts>:
 8004798:	4b02      	ldr	r3, [pc, #8]	@ (80047a4 <puts+0xc>)
 800479a:	4601      	mov	r1, r0
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	f7ff bfa5 	b.w	80046ec <_puts_r>
 80047a2:	bf00      	nop
 80047a4:	2000000c 	.word	0x2000000c

080047a8 <__sread>:
 80047a8:	b510      	push	{r4, lr}
 80047aa:	460c      	mov	r4, r1
 80047ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b0:	f000 f8fc 	bl	80049ac <_read_r>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	bfab      	itete	ge
 80047b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047ba:	89a3      	ldrhlt	r3, [r4, #12]
 80047bc:	181b      	addge	r3, r3, r0
 80047be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047c2:	bfac      	ite	ge
 80047c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047c6:	81a3      	strhlt	r3, [r4, #12]
 80047c8:	bd10      	pop	{r4, pc}

080047ca <__swrite>:
 80047ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ce:	461f      	mov	r7, r3
 80047d0:	898b      	ldrh	r3, [r1, #12]
 80047d2:	05db      	lsls	r3, r3, #23
 80047d4:	4605      	mov	r5, r0
 80047d6:	460c      	mov	r4, r1
 80047d8:	4616      	mov	r6, r2
 80047da:	d505      	bpl.n	80047e8 <__swrite+0x1e>
 80047dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e0:	2302      	movs	r3, #2
 80047e2:	2200      	movs	r2, #0
 80047e4:	f000 f8d0 	bl	8004988 <_lseek_r>
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	4632      	mov	r2, r6
 80047f6:	463b      	mov	r3, r7
 80047f8:	4628      	mov	r0, r5
 80047fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047fe:	f000 b8e7 	b.w	80049d0 <_write_r>

08004802 <__sseek>:
 8004802:	b510      	push	{r4, lr}
 8004804:	460c      	mov	r4, r1
 8004806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480a:	f000 f8bd 	bl	8004988 <_lseek_r>
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	bf15      	itete	ne
 8004814:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004816:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800481a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800481e:	81a3      	strheq	r3, [r4, #12]
 8004820:	bf18      	it	ne
 8004822:	81a3      	strhne	r3, [r4, #12]
 8004824:	bd10      	pop	{r4, pc}

08004826 <__sclose>:
 8004826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800482a:	f000 b89d 	b.w	8004968 <_close_r>

0800482e <__swbuf_r>:
 800482e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004830:	460e      	mov	r6, r1
 8004832:	4614      	mov	r4, r2
 8004834:	4605      	mov	r5, r0
 8004836:	b118      	cbz	r0, 8004840 <__swbuf_r+0x12>
 8004838:	6a03      	ldr	r3, [r0, #32]
 800483a:	b90b      	cbnz	r3, 8004840 <__swbuf_r+0x12>
 800483c:	f7ff ff20 	bl	8004680 <__sinit>
 8004840:	69a3      	ldr	r3, [r4, #24]
 8004842:	60a3      	str	r3, [r4, #8]
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	071a      	lsls	r2, r3, #28
 8004848:	d501      	bpl.n	800484e <__swbuf_r+0x20>
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	b943      	cbnz	r3, 8004860 <__swbuf_r+0x32>
 800484e:	4621      	mov	r1, r4
 8004850:	4628      	mov	r0, r5
 8004852:	f000 f82b 	bl	80048ac <__swsetup_r>
 8004856:	b118      	cbz	r0, 8004860 <__swbuf_r+0x32>
 8004858:	f04f 37ff 	mov.w	r7, #4294967295
 800485c:	4638      	mov	r0, r7
 800485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	6922      	ldr	r2, [r4, #16]
 8004864:	1a98      	subs	r0, r3, r2
 8004866:	6963      	ldr	r3, [r4, #20]
 8004868:	b2f6      	uxtb	r6, r6
 800486a:	4283      	cmp	r3, r0
 800486c:	4637      	mov	r7, r6
 800486e:	dc05      	bgt.n	800487c <__swbuf_r+0x4e>
 8004870:	4621      	mov	r1, r4
 8004872:	4628      	mov	r0, r5
 8004874:	f000 fa68 	bl	8004d48 <_fflush_r>
 8004878:	2800      	cmp	r0, #0
 800487a:	d1ed      	bne.n	8004858 <__swbuf_r+0x2a>
 800487c:	68a3      	ldr	r3, [r4, #8]
 800487e:	3b01      	subs	r3, #1
 8004880:	60a3      	str	r3, [r4, #8]
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	6022      	str	r2, [r4, #0]
 8004888:	701e      	strb	r6, [r3, #0]
 800488a:	6962      	ldr	r2, [r4, #20]
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	429a      	cmp	r2, r3
 8004890:	d004      	beq.n	800489c <__swbuf_r+0x6e>
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	07db      	lsls	r3, r3, #31
 8004896:	d5e1      	bpl.n	800485c <__swbuf_r+0x2e>
 8004898:	2e0a      	cmp	r6, #10
 800489a:	d1df      	bne.n	800485c <__swbuf_r+0x2e>
 800489c:	4621      	mov	r1, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 fa52 	bl	8004d48 <_fflush_r>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d0d9      	beq.n	800485c <__swbuf_r+0x2e>
 80048a8:	e7d6      	b.n	8004858 <__swbuf_r+0x2a>
	...

080048ac <__swsetup_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4b29      	ldr	r3, [pc, #164]	@ (8004954 <__swsetup_r+0xa8>)
 80048b0:	4605      	mov	r5, r0
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	460c      	mov	r4, r1
 80048b6:	b118      	cbz	r0, 80048c0 <__swsetup_r+0x14>
 80048b8:	6a03      	ldr	r3, [r0, #32]
 80048ba:	b90b      	cbnz	r3, 80048c0 <__swsetup_r+0x14>
 80048bc:	f7ff fee0 	bl	8004680 <__sinit>
 80048c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c4:	0719      	lsls	r1, r3, #28
 80048c6:	d422      	bmi.n	800490e <__swsetup_r+0x62>
 80048c8:	06da      	lsls	r2, r3, #27
 80048ca:	d407      	bmi.n	80048dc <__swsetup_r+0x30>
 80048cc:	2209      	movs	r2, #9
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048d4:	81a3      	strh	r3, [r4, #12]
 80048d6:	f04f 30ff 	mov.w	r0, #4294967295
 80048da:	e033      	b.n	8004944 <__swsetup_r+0x98>
 80048dc:	0758      	lsls	r0, r3, #29
 80048de:	d512      	bpl.n	8004906 <__swsetup_r+0x5a>
 80048e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048e2:	b141      	cbz	r1, 80048f6 <__swsetup_r+0x4a>
 80048e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048e8:	4299      	cmp	r1, r3
 80048ea:	d002      	beq.n	80048f2 <__swsetup_r+0x46>
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 f8af 	bl	8004a50 <_free_r>
 80048f2:	2300      	movs	r3, #0
 80048f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80048fc:	81a3      	strh	r3, [r4, #12]
 80048fe:	2300      	movs	r3, #0
 8004900:	6063      	str	r3, [r4, #4]
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	f043 0308 	orr.w	r3, r3, #8
 800490c:	81a3      	strh	r3, [r4, #12]
 800490e:	6923      	ldr	r3, [r4, #16]
 8004910:	b94b      	cbnz	r3, 8004926 <__swsetup_r+0x7a>
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800491c:	d003      	beq.n	8004926 <__swsetup_r+0x7a>
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 fa5f 	bl	8004de4 <__smakebuf_r>
 8004926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800492a:	f013 0201 	ands.w	r2, r3, #1
 800492e:	d00a      	beq.n	8004946 <__swsetup_r+0x9a>
 8004930:	2200      	movs	r2, #0
 8004932:	60a2      	str	r2, [r4, #8]
 8004934:	6962      	ldr	r2, [r4, #20]
 8004936:	4252      	negs	r2, r2
 8004938:	61a2      	str	r2, [r4, #24]
 800493a:	6922      	ldr	r2, [r4, #16]
 800493c:	b942      	cbnz	r2, 8004950 <__swsetup_r+0xa4>
 800493e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004942:	d1c5      	bne.n	80048d0 <__swsetup_r+0x24>
 8004944:	bd38      	pop	{r3, r4, r5, pc}
 8004946:	0799      	lsls	r1, r3, #30
 8004948:	bf58      	it	pl
 800494a:	6962      	ldrpl	r2, [r4, #20]
 800494c:	60a2      	str	r2, [r4, #8]
 800494e:	e7f4      	b.n	800493a <__swsetup_r+0x8e>
 8004950:	2000      	movs	r0, #0
 8004952:	e7f7      	b.n	8004944 <__swsetup_r+0x98>
 8004954:	2000000c 	.word	0x2000000c

08004958 <memset>:
 8004958:	4402      	add	r2, r0
 800495a:	4603      	mov	r3, r0
 800495c:	4293      	cmp	r3, r2
 800495e:	d100      	bne.n	8004962 <memset+0xa>
 8004960:	4770      	bx	lr
 8004962:	f803 1b01 	strb.w	r1, [r3], #1
 8004966:	e7f9      	b.n	800495c <memset+0x4>

08004968 <_close_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4d06      	ldr	r5, [pc, #24]	@ (8004984 <_close_r+0x1c>)
 800496c:	2300      	movs	r3, #0
 800496e:	4604      	mov	r4, r0
 8004970:	4608      	mov	r0, r1
 8004972:	602b      	str	r3, [r5, #0]
 8004974:	f7ff fcf3 	bl	800435e <_close>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_close_r+0x1a>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	b103      	cbz	r3, 8004982 <_close_r+0x1a>
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	200001c0 	.word	0x200001c0

08004988 <_lseek_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4d07      	ldr	r5, [pc, #28]	@ (80049a8 <_lseek_r+0x20>)
 800498c:	4604      	mov	r4, r0
 800498e:	4608      	mov	r0, r1
 8004990:	4611      	mov	r1, r2
 8004992:	2200      	movs	r2, #0
 8004994:	602a      	str	r2, [r5, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	f7ff fd08 	bl	80043ac <_lseek>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d102      	bne.n	80049a6 <_lseek_r+0x1e>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	b103      	cbz	r3, 80049a6 <_lseek_r+0x1e>
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	200001c0 	.word	0x200001c0

080049ac <_read_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4d07      	ldr	r5, [pc, #28]	@ (80049cc <_read_r+0x20>)
 80049b0:	4604      	mov	r4, r0
 80049b2:	4608      	mov	r0, r1
 80049b4:	4611      	mov	r1, r2
 80049b6:	2200      	movs	r2, #0
 80049b8:	602a      	str	r2, [r5, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f7ff fc96 	bl	80042ec <_read>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	d102      	bne.n	80049ca <_read_r+0x1e>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	b103      	cbz	r3, 80049ca <_read_r+0x1e>
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	200001c0 	.word	0x200001c0

080049d0 <_write_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4d07      	ldr	r5, [pc, #28]	@ (80049f0 <_write_r+0x20>)
 80049d4:	4604      	mov	r4, r0
 80049d6:	4608      	mov	r0, r1
 80049d8:	4611      	mov	r1, r2
 80049da:	2200      	movs	r2, #0
 80049dc:	602a      	str	r2, [r5, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	f7ff fca1 	bl	8004326 <_write>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d102      	bne.n	80049ee <_write_r+0x1e>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	b103      	cbz	r3, 80049ee <_write_r+0x1e>
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	200001c0 	.word	0x200001c0

080049f4 <__errno>:
 80049f4:	4b01      	ldr	r3, [pc, #4]	@ (80049fc <__errno+0x8>)
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	2000000c 	.word	0x2000000c

08004a00 <__libc_init_array>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	4d0d      	ldr	r5, [pc, #52]	@ (8004a38 <__libc_init_array+0x38>)
 8004a04:	4c0d      	ldr	r4, [pc, #52]	@ (8004a3c <__libc_init_array+0x3c>)
 8004a06:	1b64      	subs	r4, r4, r5
 8004a08:	10a4      	asrs	r4, r4, #2
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	42a6      	cmp	r6, r4
 8004a0e:	d109      	bne.n	8004a24 <__libc_init_array+0x24>
 8004a10:	4d0b      	ldr	r5, [pc, #44]	@ (8004a40 <__libc_init_array+0x40>)
 8004a12:	4c0c      	ldr	r4, [pc, #48]	@ (8004a44 <__libc_init_array+0x44>)
 8004a14:	f000 fa54 	bl	8004ec0 <_init>
 8004a18:	1b64      	subs	r4, r4, r5
 8004a1a:	10a4      	asrs	r4, r4, #2
 8004a1c:	2600      	movs	r6, #0
 8004a1e:	42a6      	cmp	r6, r4
 8004a20:	d105      	bne.n	8004a2e <__libc_init_array+0x2e>
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a28:	4798      	blx	r3
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	e7ee      	b.n	8004a0c <__libc_init_array+0xc>
 8004a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a32:	4798      	blx	r3
 8004a34:	3601      	adds	r6, #1
 8004a36:	e7f2      	b.n	8004a1e <__libc_init_array+0x1e>
 8004a38:	08004ef8 	.word	0x08004ef8
 8004a3c:	08004ef8 	.word	0x08004ef8
 8004a40:	08004ef8 	.word	0x08004ef8
 8004a44:	08004efc 	.word	0x08004efc

08004a48 <__retarget_lock_init_recursive>:
 8004a48:	4770      	bx	lr

08004a4a <__retarget_lock_acquire_recursive>:
 8004a4a:	4770      	bx	lr

08004a4c <__retarget_lock_release_recursive>:
 8004a4c:	4770      	bx	lr
	...

08004a50 <_free_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4605      	mov	r5, r0
 8004a54:	2900      	cmp	r1, #0
 8004a56:	d041      	beq.n	8004adc <_free_r+0x8c>
 8004a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a5c:	1f0c      	subs	r4, r1, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bfb8      	it	lt
 8004a62:	18e4      	addlt	r4, r4, r3
 8004a64:	f000 f8e0 	bl	8004c28 <__malloc_lock>
 8004a68:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae0 <_free_r+0x90>)
 8004a6a:	6813      	ldr	r3, [r2, #0]
 8004a6c:	b933      	cbnz	r3, 8004a7c <_free_r+0x2c>
 8004a6e:	6063      	str	r3, [r4, #4]
 8004a70:	6014      	str	r4, [r2, #0]
 8004a72:	4628      	mov	r0, r5
 8004a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a78:	f000 b8dc 	b.w	8004c34 <__malloc_unlock>
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	d908      	bls.n	8004a92 <_free_r+0x42>
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	1821      	adds	r1, r4, r0
 8004a84:	428b      	cmp	r3, r1
 8004a86:	bf01      	itttt	eq
 8004a88:	6819      	ldreq	r1, [r3, #0]
 8004a8a:	685b      	ldreq	r3, [r3, #4]
 8004a8c:	1809      	addeq	r1, r1, r0
 8004a8e:	6021      	streq	r1, [r4, #0]
 8004a90:	e7ed      	b.n	8004a6e <_free_r+0x1e>
 8004a92:	461a      	mov	r2, r3
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	b10b      	cbz	r3, 8004a9c <_free_r+0x4c>
 8004a98:	42a3      	cmp	r3, r4
 8004a9a:	d9fa      	bls.n	8004a92 <_free_r+0x42>
 8004a9c:	6811      	ldr	r1, [r2, #0]
 8004a9e:	1850      	adds	r0, r2, r1
 8004aa0:	42a0      	cmp	r0, r4
 8004aa2:	d10b      	bne.n	8004abc <_free_r+0x6c>
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	4401      	add	r1, r0
 8004aa8:	1850      	adds	r0, r2, r1
 8004aaa:	4283      	cmp	r3, r0
 8004aac:	6011      	str	r1, [r2, #0]
 8004aae:	d1e0      	bne.n	8004a72 <_free_r+0x22>
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	6053      	str	r3, [r2, #4]
 8004ab6:	4408      	add	r0, r1
 8004ab8:	6010      	str	r0, [r2, #0]
 8004aba:	e7da      	b.n	8004a72 <_free_r+0x22>
 8004abc:	d902      	bls.n	8004ac4 <_free_r+0x74>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	e7d6      	b.n	8004a72 <_free_r+0x22>
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	1821      	adds	r1, r4, r0
 8004ac8:	428b      	cmp	r3, r1
 8004aca:	bf04      	itt	eq
 8004acc:	6819      	ldreq	r1, [r3, #0]
 8004ace:	685b      	ldreq	r3, [r3, #4]
 8004ad0:	6063      	str	r3, [r4, #4]
 8004ad2:	bf04      	itt	eq
 8004ad4:	1809      	addeq	r1, r1, r0
 8004ad6:	6021      	streq	r1, [r4, #0]
 8004ad8:	6054      	str	r4, [r2, #4]
 8004ada:	e7ca      	b.n	8004a72 <_free_r+0x22>
 8004adc:	bd38      	pop	{r3, r4, r5, pc}
 8004ade:	bf00      	nop
 8004ae0:	200001cc 	.word	0x200001cc

08004ae4 <sbrk_aligned>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8004b24 <sbrk_aligned+0x40>)
 8004ae8:	460c      	mov	r4, r1
 8004aea:	6831      	ldr	r1, [r6, #0]
 8004aec:	4605      	mov	r5, r0
 8004aee:	b911      	cbnz	r1, 8004af6 <sbrk_aligned+0x12>
 8004af0:	f000 f9d6 	bl	8004ea0 <_sbrk_r>
 8004af4:	6030      	str	r0, [r6, #0]
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 f9d1 	bl	8004ea0 <_sbrk_r>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	d103      	bne.n	8004b0a <sbrk_aligned+0x26>
 8004b02:	f04f 34ff 	mov.w	r4, #4294967295
 8004b06:	4620      	mov	r0, r4
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
 8004b0a:	1cc4      	adds	r4, r0, #3
 8004b0c:	f024 0403 	bic.w	r4, r4, #3
 8004b10:	42a0      	cmp	r0, r4
 8004b12:	d0f8      	beq.n	8004b06 <sbrk_aligned+0x22>
 8004b14:	1a21      	subs	r1, r4, r0
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 f9c2 	bl	8004ea0 <_sbrk_r>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d1f2      	bne.n	8004b06 <sbrk_aligned+0x22>
 8004b20:	e7ef      	b.n	8004b02 <sbrk_aligned+0x1e>
 8004b22:	bf00      	nop
 8004b24:	200001c8 	.word	0x200001c8

08004b28 <_malloc_r>:
 8004b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b2c:	1ccd      	adds	r5, r1, #3
 8004b2e:	f025 0503 	bic.w	r5, r5, #3
 8004b32:	3508      	adds	r5, #8
 8004b34:	2d0c      	cmp	r5, #12
 8004b36:	bf38      	it	cc
 8004b38:	250c      	movcc	r5, #12
 8004b3a:	2d00      	cmp	r5, #0
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	db01      	blt.n	8004b44 <_malloc_r+0x1c>
 8004b40:	42a9      	cmp	r1, r5
 8004b42:	d904      	bls.n	8004b4e <_malloc_r+0x26>
 8004b44:	230c      	movs	r3, #12
 8004b46:	6033      	str	r3, [r6, #0]
 8004b48:	2000      	movs	r0, #0
 8004b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c24 <_malloc_r+0xfc>
 8004b52:	f000 f869 	bl	8004c28 <__malloc_lock>
 8004b56:	f8d8 3000 	ldr.w	r3, [r8]
 8004b5a:	461c      	mov	r4, r3
 8004b5c:	bb44      	cbnz	r4, 8004bb0 <_malloc_r+0x88>
 8004b5e:	4629      	mov	r1, r5
 8004b60:	4630      	mov	r0, r6
 8004b62:	f7ff ffbf 	bl	8004ae4 <sbrk_aligned>
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	4604      	mov	r4, r0
 8004b6a:	d158      	bne.n	8004c1e <_malloc_r+0xf6>
 8004b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b70:	4627      	mov	r7, r4
 8004b72:	2f00      	cmp	r7, #0
 8004b74:	d143      	bne.n	8004bfe <_malloc_r+0xd6>
 8004b76:	2c00      	cmp	r4, #0
 8004b78:	d04b      	beq.n	8004c12 <_malloc_r+0xea>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	4630      	mov	r0, r6
 8004b80:	eb04 0903 	add.w	r9, r4, r3
 8004b84:	f000 f98c 	bl	8004ea0 <_sbrk_r>
 8004b88:	4581      	cmp	r9, r0
 8004b8a:	d142      	bne.n	8004c12 <_malloc_r+0xea>
 8004b8c:	6821      	ldr	r1, [r4, #0]
 8004b8e:	1a6d      	subs	r5, r5, r1
 8004b90:	4629      	mov	r1, r5
 8004b92:	4630      	mov	r0, r6
 8004b94:	f7ff ffa6 	bl	8004ae4 <sbrk_aligned>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d03a      	beq.n	8004c12 <_malloc_r+0xea>
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	442b      	add	r3, r5
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	bb62      	cbnz	r2, 8004c04 <_malloc_r+0xdc>
 8004baa:	f8c8 7000 	str.w	r7, [r8]
 8004bae:	e00f      	b.n	8004bd0 <_malloc_r+0xa8>
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	1b52      	subs	r2, r2, r5
 8004bb4:	d420      	bmi.n	8004bf8 <_malloc_r+0xd0>
 8004bb6:	2a0b      	cmp	r2, #11
 8004bb8:	d917      	bls.n	8004bea <_malloc_r+0xc2>
 8004bba:	1961      	adds	r1, r4, r5
 8004bbc:	42a3      	cmp	r3, r4
 8004bbe:	6025      	str	r5, [r4, #0]
 8004bc0:	bf18      	it	ne
 8004bc2:	6059      	strne	r1, [r3, #4]
 8004bc4:	6863      	ldr	r3, [r4, #4]
 8004bc6:	bf08      	it	eq
 8004bc8:	f8c8 1000 	streq.w	r1, [r8]
 8004bcc:	5162      	str	r2, [r4, r5]
 8004bce:	604b      	str	r3, [r1, #4]
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 f82f 	bl	8004c34 <__malloc_unlock>
 8004bd6:	f104 000b 	add.w	r0, r4, #11
 8004bda:	1d23      	adds	r3, r4, #4
 8004bdc:	f020 0007 	bic.w	r0, r0, #7
 8004be0:	1ac2      	subs	r2, r0, r3
 8004be2:	bf1c      	itt	ne
 8004be4:	1a1b      	subne	r3, r3, r0
 8004be6:	50a3      	strne	r3, [r4, r2]
 8004be8:	e7af      	b.n	8004b4a <_malloc_r+0x22>
 8004bea:	6862      	ldr	r2, [r4, #4]
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	bf0c      	ite	eq
 8004bf0:	f8c8 2000 	streq.w	r2, [r8]
 8004bf4:	605a      	strne	r2, [r3, #4]
 8004bf6:	e7eb      	b.n	8004bd0 <_malloc_r+0xa8>
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	6864      	ldr	r4, [r4, #4]
 8004bfc:	e7ae      	b.n	8004b5c <_malloc_r+0x34>
 8004bfe:	463c      	mov	r4, r7
 8004c00:	687f      	ldr	r7, [r7, #4]
 8004c02:	e7b6      	b.n	8004b72 <_malloc_r+0x4a>
 8004c04:	461a      	mov	r2, r3
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	d1fb      	bne.n	8004c04 <_malloc_r+0xdc>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6053      	str	r3, [r2, #4]
 8004c10:	e7de      	b.n	8004bd0 <_malloc_r+0xa8>
 8004c12:	230c      	movs	r3, #12
 8004c14:	6033      	str	r3, [r6, #0]
 8004c16:	4630      	mov	r0, r6
 8004c18:	f000 f80c 	bl	8004c34 <__malloc_unlock>
 8004c1c:	e794      	b.n	8004b48 <_malloc_r+0x20>
 8004c1e:	6005      	str	r5, [r0, #0]
 8004c20:	e7d6      	b.n	8004bd0 <_malloc_r+0xa8>
 8004c22:	bf00      	nop
 8004c24:	200001cc 	.word	0x200001cc

08004c28 <__malloc_lock>:
 8004c28:	4801      	ldr	r0, [pc, #4]	@ (8004c30 <__malloc_lock+0x8>)
 8004c2a:	f7ff bf0e 	b.w	8004a4a <__retarget_lock_acquire_recursive>
 8004c2e:	bf00      	nop
 8004c30:	200001c4 	.word	0x200001c4

08004c34 <__malloc_unlock>:
 8004c34:	4801      	ldr	r0, [pc, #4]	@ (8004c3c <__malloc_unlock+0x8>)
 8004c36:	f7ff bf09 	b.w	8004a4c <__retarget_lock_release_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	200001c4 	.word	0x200001c4

08004c40 <__sflush_r>:
 8004c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c48:	0716      	lsls	r6, r2, #28
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	d454      	bmi.n	8004cfa <__sflush_r+0xba>
 8004c50:	684b      	ldr	r3, [r1, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	dc02      	bgt.n	8004c5c <__sflush_r+0x1c>
 8004c56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	dd48      	ble.n	8004cee <__sflush_r+0xae>
 8004c5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c5e:	2e00      	cmp	r6, #0
 8004c60:	d045      	beq.n	8004cee <__sflush_r+0xae>
 8004c62:	2300      	movs	r3, #0
 8004c64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c68:	682f      	ldr	r7, [r5, #0]
 8004c6a:	6a21      	ldr	r1, [r4, #32]
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	d030      	beq.n	8004cd2 <__sflush_r+0x92>
 8004c70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	0759      	lsls	r1, r3, #29
 8004c76:	d505      	bpl.n	8004c84 <__sflush_r+0x44>
 8004c78:	6863      	ldr	r3, [r4, #4]
 8004c7a:	1ad2      	subs	r2, r2, r3
 8004c7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c7e:	b10b      	cbz	r3, 8004c84 <__sflush_r+0x44>
 8004c80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c82:	1ad2      	subs	r2, r2, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c88:	6a21      	ldr	r1, [r4, #32]
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b0      	blx	r6
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	d106      	bne.n	8004ca2 <__sflush_r+0x62>
 8004c94:	6829      	ldr	r1, [r5, #0]
 8004c96:	291d      	cmp	r1, #29
 8004c98:	d82b      	bhi.n	8004cf2 <__sflush_r+0xb2>
 8004c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004d44 <__sflush_r+0x104>)
 8004c9c:	40ca      	lsrs	r2, r1
 8004c9e:	07d6      	lsls	r6, r2, #31
 8004ca0:	d527      	bpl.n	8004cf2 <__sflush_r+0xb2>
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	6062      	str	r2, [r4, #4]
 8004ca6:	04d9      	lsls	r1, r3, #19
 8004ca8:	6922      	ldr	r2, [r4, #16]
 8004caa:	6022      	str	r2, [r4, #0]
 8004cac:	d504      	bpl.n	8004cb8 <__sflush_r+0x78>
 8004cae:	1c42      	adds	r2, r0, #1
 8004cb0:	d101      	bne.n	8004cb6 <__sflush_r+0x76>
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	b903      	cbnz	r3, 8004cb8 <__sflush_r+0x78>
 8004cb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8004cb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cba:	602f      	str	r7, [r5, #0]
 8004cbc:	b1b9      	cbz	r1, 8004cee <__sflush_r+0xae>
 8004cbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cc2:	4299      	cmp	r1, r3
 8004cc4:	d002      	beq.n	8004ccc <__sflush_r+0x8c>
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f7ff fec2 	bl	8004a50 <_free_r>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cd0:	e00d      	b.n	8004cee <__sflush_r+0xae>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b0      	blx	r6
 8004cd8:	4602      	mov	r2, r0
 8004cda:	1c50      	adds	r0, r2, #1
 8004cdc:	d1c9      	bne.n	8004c72 <__sflush_r+0x32>
 8004cde:	682b      	ldr	r3, [r5, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0c6      	beq.n	8004c72 <__sflush_r+0x32>
 8004ce4:	2b1d      	cmp	r3, #29
 8004ce6:	d001      	beq.n	8004cec <__sflush_r+0xac>
 8004ce8:	2b16      	cmp	r3, #22
 8004cea:	d11e      	bne.n	8004d2a <__sflush_r+0xea>
 8004cec:	602f      	str	r7, [r5, #0]
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e022      	b.n	8004d38 <__sflush_r+0xf8>
 8004cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf6:	b21b      	sxth	r3, r3
 8004cf8:	e01b      	b.n	8004d32 <__sflush_r+0xf2>
 8004cfa:	690f      	ldr	r7, [r1, #16]
 8004cfc:	2f00      	cmp	r7, #0
 8004cfe:	d0f6      	beq.n	8004cee <__sflush_r+0xae>
 8004d00:	0793      	lsls	r3, r2, #30
 8004d02:	680e      	ldr	r6, [r1, #0]
 8004d04:	bf08      	it	eq
 8004d06:	694b      	ldreq	r3, [r1, #20]
 8004d08:	600f      	str	r7, [r1, #0]
 8004d0a:	bf18      	it	ne
 8004d0c:	2300      	movne	r3, #0
 8004d0e:	eba6 0807 	sub.w	r8, r6, r7
 8004d12:	608b      	str	r3, [r1, #8]
 8004d14:	f1b8 0f00 	cmp.w	r8, #0
 8004d18:	dde9      	ble.n	8004cee <__sflush_r+0xae>
 8004d1a:	6a21      	ldr	r1, [r4, #32]
 8004d1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d1e:	4643      	mov	r3, r8
 8004d20:	463a      	mov	r2, r7
 8004d22:	4628      	mov	r0, r5
 8004d24:	47b0      	blx	r6
 8004d26:	2800      	cmp	r0, #0
 8004d28:	dc08      	bgt.n	8004d3c <__sflush_r+0xfc>
 8004d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d32:	81a3      	strh	r3, [r4, #12]
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295
 8004d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d3c:	4407      	add	r7, r0
 8004d3e:	eba8 0800 	sub.w	r8, r8, r0
 8004d42:	e7e7      	b.n	8004d14 <__sflush_r+0xd4>
 8004d44:	20400001 	.word	0x20400001

08004d48 <_fflush_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	690b      	ldr	r3, [r1, #16]
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	b913      	cbnz	r3, 8004d58 <_fflush_r+0x10>
 8004d52:	2500      	movs	r5, #0
 8004d54:	4628      	mov	r0, r5
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	b118      	cbz	r0, 8004d62 <_fflush_r+0x1a>
 8004d5a:	6a03      	ldr	r3, [r0, #32]
 8004d5c:	b90b      	cbnz	r3, 8004d62 <_fflush_r+0x1a>
 8004d5e:	f7ff fc8f 	bl	8004680 <__sinit>
 8004d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f3      	beq.n	8004d52 <_fflush_r+0xa>
 8004d6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d6c:	07d0      	lsls	r0, r2, #31
 8004d6e:	d404      	bmi.n	8004d7a <_fflush_r+0x32>
 8004d70:	0599      	lsls	r1, r3, #22
 8004d72:	d402      	bmi.n	8004d7a <_fflush_r+0x32>
 8004d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d76:	f7ff fe68 	bl	8004a4a <__retarget_lock_acquire_recursive>
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	f7ff ff5f 	bl	8004c40 <__sflush_r>
 8004d82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d84:	07da      	lsls	r2, r3, #31
 8004d86:	4605      	mov	r5, r0
 8004d88:	d4e4      	bmi.n	8004d54 <_fflush_r+0xc>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	059b      	lsls	r3, r3, #22
 8004d8e:	d4e1      	bmi.n	8004d54 <_fflush_r+0xc>
 8004d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d92:	f7ff fe5b 	bl	8004a4c <__retarget_lock_release_recursive>
 8004d96:	e7dd      	b.n	8004d54 <_fflush_r+0xc>

08004d98 <__swhatbuf_r>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	2900      	cmp	r1, #0
 8004da2:	b096      	sub	sp, #88	@ 0x58
 8004da4:	4615      	mov	r5, r2
 8004da6:	461e      	mov	r6, r3
 8004da8:	da0d      	bge.n	8004dc6 <__swhatbuf_r+0x2e>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004db0:	f04f 0100 	mov.w	r1, #0
 8004db4:	bf14      	ite	ne
 8004db6:	2340      	movne	r3, #64	@ 0x40
 8004db8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	6031      	str	r1, [r6, #0]
 8004dc0:	602b      	str	r3, [r5, #0]
 8004dc2:	b016      	add	sp, #88	@ 0x58
 8004dc4:	bd70      	pop	{r4, r5, r6, pc}
 8004dc6:	466a      	mov	r2, sp
 8004dc8:	f000 f848 	bl	8004e5c <_fstat_r>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	dbec      	blt.n	8004daa <__swhatbuf_r+0x12>
 8004dd0:	9901      	ldr	r1, [sp, #4]
 8004dd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004dd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004dda:	4259      	negs	r1, r3
 8004ddc:	4159      	adcs	r1, r3
 8004dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004de2:	e7eb      	b.n	8004dbc <__swhatbuf_r+0x24>

08004de4 <__smakebuf_r>:
 8004de4:	898b      	ldrh	r3, [r1, #12]
 8004de6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004de8:	079d      	lsls	r5, r3, #30
 8004dea:	4606      	mov	r6, r0
 8004dec:	460c      	mov	r4, r1
 8004dee:	d507      	bpl.n	8004e00 <__smakebuf_r+0x1c>
 8004df0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	2301      	movs	r3, #1
 8004dfa:	6163      	str	r3, [r4, #20]
 8004dfc:	b003      	add	sp, #12
 8004dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e00:	ab01      	add	r3, sp, #4
 8004e02:	466a      	mov	r2, sp
 8004e04:	f7ff ffc8 	bl	8004d98 <__swhatbuf_r>
 8004e08:	9f00      	ldr	r7, [sp, #0]
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	4630      	mov	r0, r6
 8004e10:	f7ff fe8a 	bl	8004b28 <_malloc_r>
 8004e14:	b948      	cbnz	r0, 8004e2a <__smakebuf_r+0x46>
 8004e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e1a:	059a      	lsls	r2, r3, #22
 8004e1c:	d4ee      	bmi.n	8004dfc <__smakebuf_r+0x18>
 8004e1e:	f023 0303 	bic.w	r3, r3, #3
 8004e22:	f043 0302 	orr.w	r3, r3, #2
 8004e26:	81a3      	strh	r3, [r4, #12]
 8004e28:	e7e2      	b.n	8004df0 <__smakebuf_r+0xc>
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	6020      	str	r0, [r4, #0]
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	9b01      	ldr	r3, [sp, #4]
 8004e36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e3a:	b15b      	cbz	r3, 8004e54 <__smakebuf_r+0x70>
 8004e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 f81d 	bl	8004e80 <_isatty_r>
 8004e46:	b128      	cbz	r0, 8004e54 <__smakebuf_r+0x70>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	431d      	orrs	r5, r3
 8004e58:	81a5      	strh	r5, [r4, #12]
 8004e5a:	e7cf      	b.n	8004dfc <__smakebuf_r+0x18>

08004e5c <_fstat_r>:
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4d07      	ldr	r5, [pc, #28]	@ (8004e7c <_fstat_r+0x20>)
 8004e60:	2300      	movs	r3, #0
 8004e62:	4604      	mov	r4, r0
 8004e64:	4608      	mov	r0, r1
 8004e66:	4611      	mov	r1, r2
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	f7ff fa84 	bl	8004376 <_fstat>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	d102      	bne.n	8004e78 <_fstat_r+0x1c>
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	b103      	cbz	r3, 8004e78 <_fstat_r+0x1c>
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	bd38      	pop	{r3, r4, r5, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200001c0 	.word	0x200001c0

08004e80 <_isatty_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4d06      	ldr	r5, [pc, #24]	@ (8004e9c <_isatty_r+0x1c>)
 8004e84:	2300      	movs	r3, #0
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	f7ff fa83 	bl	8004396 <_isatty>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_isatty_r+0x1a>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_isatty_r+0x1a>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	200001c0 	.word	0x200001c0

08004ea0 <_sbrk_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4d06      	ldr	r5, [pc, #24]	@ (8004ebc <_sbrk_r+0x1c>)
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	4608      	mov	r0, r1
 8004eaa:	602b      	str	r3, [r5, #0]
 8004eac:	f7ff fa8c 	bl	80043c8 <_sbrk>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d102      	bne.n	8004eba <_sbrk_r+0x1a>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	b103      	cbz	r3, 8004eba <_sbrk_r+0x1a>
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	200001c0 	.word	0x200001c0

08004ec0 <_init>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr

08004ecc <_fini>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr
