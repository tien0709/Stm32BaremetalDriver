
Factory_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  0800c000  0800c000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d8c  0800c198  0800c198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800cf24  0800cf24  00001f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf44  0800cf44  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800cf44  0800cf44  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800cf44  0800cf44  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf44  0800cf44  00001f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf48  0800cf48  00001f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800cf4c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  0800cfa8  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800cfa8  000021d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000164a  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007e8  00000000  00000000  000036d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00003ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000153  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe5a  00000000  00000000  0000420b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e7b  00000000  00000000  00014065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055e2e  00000000  00000000  00016ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006cd0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c1c  00000000  00000000  0006cd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0006d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c198 <__do_global_dtors_aux>:
 800c198:	b510      	push	{r4, lr}
 800c19a:	4c05      	ldr	r4, [pc, #20]	@ (800c1b0 <__do_global_dtors_aux+0x18>)
 800c19c:	7823      	ldrb	r3, [r4, #0]
 800c19e:	b933      	cbnz	r3, 800c1ae <__do_global_dtors_aux+0x16>
 800c1a0:	4b04      	ldr	r3, [pc, #16]	@ (800c1b4 <__do_global_dtors_aux+0x1c>)
 800c1a2:	b113      	cbz	r3, 800c1aa <__do_global_dtors_aux+0x12>
 800c1a4:	4804      	ldr	r0, [pc, #16]	@ (800c1b8 <__do_global_dtors_aux+0x20>)
 800c1a6:	f3af 8000 	nop.w
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	7023      	strb	r3, [r4, #0]
 800c1ae:	bd10      	pop	{r4, pc}
 800c1b0:	2000005c 	.word	0x2000005c
 800c1b4:	00000000 	.word	0x00000000
 800c1b8:	0800cf0c 	.word	0x0800cf0c

0800c1bc <frame_dummy>:
 800c1bc:	b508      	push	{r3, lr}
 800c1be:	4b03      	ldr	r3, [pc, #12]	@ (800c1cc <frame_dummy+0x10>)
 800c1c0:	b11b      	cbz	r3, 800c1ca <frame_dummy+0xe>
 800c1c2:	4903      	ldr	r1, [pc, #12]	@ (800c1d0 <frame_dummy+0x14>)
 800c1c4:	4803      	ldr	r0, [pc, #12]	@ (800c1d4 <frame_dummy+0x18>)
 800c1c6:	f3af 8000 	nop.w
 800c1ca:	bd08      	pop	{r3, pc}
 800c1cc:	00000000 	.word	0x00000000
 800c1d0:	20000060 	.word	0x20000060
 800c1d4:	0800cf0c 	.word	0x0800cf0c

0800c1d8 <led_init>:
#define GPIOCEN (1U<<2)
#define PIN5 (1U<<5)
#define LED_PIN PIN5
#define PIN13 (1U<<13)
#define BTN_PIN PIN13
void led_init(void){
 800c1d8:	b480      	push	{r7}
 800c1da:	af00      	add	r7, sp, #0
	//enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 800c1dc:	4b0b      	ldr	r3, [pc, #44]	@ (800c20c <led_init+0x34>)
 800c1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1e0:	4a0a      	ldr	r2, [pc, #40]	@ (800c20c <led_init+0x34>)
 800c1e2:	f043 0301 	orr.w	r3, r3, #1
 800c1e6:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA5 mode to Output mode
	GPIOA->MODER |= (1<<10);
 800c1e8:	4b09      	ldr	r3, [pc, #36]	@ (800c210 <led_init+0x38>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a08      	ldr	r2, [pc, #32]	@ (800c210 <led_init+0x38>)
 800c1ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c1f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<11); //MODER5 01 = set output mode to PA5 pin
 800c1f4:	4b06      	ldr	r3, [pc, #24]	@ (800c210 <led_init+0x38>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a05      	ldr	r2, [pc, #20]	@ (800c210 <led_init+0x38>)
 800c1fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c1fe:	6013      	str	r3, [r2, #0]
}
 800c200:	bf00      	nop
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	40023800 	.word	0x40023800
 800c210:	40020000 	.word	0x40020000

0800c214 <button_init>:
}
void led_off(void){
	GPIOA->ODR &= ~LED_PIN;
}

void button_init(void){
 800c214:	b480      	push	{r7}
 800c216:	af00      	add	r7, sp, #0
	//enable clock access to GPIOC
	RCC->AHB1ENR |= GPIOCEN;
 800c218:	4b0b      	ldr	r3, [pc, #44]	@ (800c248 <button_init+0x34>)
 800c21a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c21c:	4a0a      	ldr	r2, [pc, #40]	@ (800c248 <button_init+0x34>)
 800c21e:	f043 0304 	orr.w	r3, r3, #4
 800c222:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PC13 mode to input mode
	GPIOC->MODER &= ~(1<<26);
 800c224:	4b09      	ldr	r3, [pc, #36]	@ (800c24c <button_init+0x38>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a08      	ldr	r2, [pc, #32]	@ (800c24c <button_init+0x38>)
 800c22a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c22e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1<<27); //MODER13 00 = set input mode to PC13 pin
 800c230:	4b06      	ldr	r3, [pc, #24]	@ (800c24c <button_init+0x38>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a05      	ldr	r2, [pc, #20]	@ (800c24c <button_init+0x38>)
 800c236:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800c23a:	6013      	str	r3, [r2, #0]
}
 800c23c:	bf00      	nop
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	40023800 	.word	0x40023800
 800c24c:	40020800 	.word	0x40020800

0800c250 <fpu_enable>:
#include "stm32f4xx.h"

void fpu_enable(void){
 800c250:	b480      	push	{r7}
 800c252:	af00      	add	r7, sp, #0
	/* enable floating point access: enable CP10 and CP11 full access*/
	SCB->CPACR |= (1<<20);
 800c254:	4b12      	ldr	r3, [pc, #72]	@ (800c2a0 <fpu_enable+0x50>)
 800c256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c25a:	4a11      	ldr	r2, [pc, #68]	@ (800c2a0 <fpu_enable+0x50>)
 800c25c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<21);
 800c264:	4b0e      	ldr	r3, [pc, #56]	@ (800c2a0 <fpu_enable+0x50>)
 800c266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c26a:	4a0d      	ldr	r2, [pc, #52]	@ (800c2a0 <fpu_enable+0x50>)
 800c26c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<22);
 800c274:	4b0a      	ldr	r3, [pc, #40]	@ (800c2a0 <fpu_enable+0x50>)
 800c276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c27a:	4a09      	ldr	r2, [pc, #36]	@ (800c2a0 <fpu_enable+0x50>)
 800c27c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<23);
 800c284:	4b06      	ldr	r3, [pc, #24]	@ (800c2a0 <fpu_enable+0x50>)
 800c286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c28a:	4a05      	ldr	r2, [pc, #20]	@ (800c2a0 <fpu_enable+0x50>)
 800c28c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800c294:	bf00      	nop
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	e000ed00 	.word	0xe000ed00

0800c2a4 <SystemInit>:
#define VECTOR_TABLE_OFFSET 0xC000

typedef void(*func_ptr)(void);

//callback of reset handler, Automatically call
void SystemInit(void){
 800c2a4:	b480      	push	{r7}
 800c2a6:	af00      	add	r7, sp, #0
	SCB->VTOR = VECTOR_TABLE_BASE_ADDRESS|VECTOR_TABLE_OFFSET;
 800c2a8:	4b03      	ldr	r3, [pc, #12]	@ (800c2b8 <SystemInit+0x14>)
 800c2aa:	4a04      	ldr	r2, [pc, #16]	@ (800c2bc <SystemInit+0x18>)
 800c2ac:	609a      	str	r2, [r3, #8]
}
 800c2ae:	bf00      	nop
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr
 800c2b8:	e000ed00 	.word	0xe000ed00
 800c2bc:	0800c000 	.word	0x0800c000

0800c2c0 <main>:


int main(){
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0

	//enable Floating point
	fpu_enable();
 800c2c4:	f7ff ffc4 	bl	800c250 <fpu_enable>


	//enable timebase
	timebase_init();
 800c2c8:	f000 f8f6 	bl	800c4b8 <timebase_init>

	//enable led
	led_init();
 800c2cc:	f7ff ff84 	bl	800c1d8 <led_init>

	//enable button
	button_init();
 800c2d0:	f7ff ffa0 	bl	800c214 <button_init>

	while(1){
		printf("Factory application is running\n");
 800c2d4:	4804      	ldr	r0, [pc, #16]	@ (800c2e8 <main+0x28>)
 800c2d6:	f000 fa85 	bl	800c7e4 <puts>
		delay(1000);
 800c2da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800c2de:	f000 f8a9 	bl	800c434 <delay>
		printf("Factory application is running\n");
 800c2e2:	bf00      	nop
 800c2e4:	e7f6      	b.n	800c2d4 <main+0x14>
 800c2e6:	bf00      	nop
 800c2e8:	0800cf24 	.word	0x0800cf24

0800c2ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	617b      	str	r3, [r7, #20]
 800c2fc:	e00a      	b.n	800c314 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c2fe:	f3af 8000 	nop.w
 800c302:	4601      	mov	r1, r0
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	1c5a      	adds	r2, r3, #1
 800c308:	60ba      	str	r2, [r7, #8]
 800c30a:	b2ca      	uxtb	r2, r1
 800c30c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	3301      	adds	r3, #1
 800c312:	617b      	str	r3, [r7, #20]
 800c314:	697a      	ldr	r2, [r7, #20]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	429a      	cmp	r2, r3
 800c31a:	dbf0      	blt.n	800c2fe <_read+0x12>
  }

  return len;
 800c31c:	687b      	ldr	r3, [r7, #4]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3718      	adds	r7, #24
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b086      	sub	sp, #24
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c332:	2300      	movs	r3, #0
 800c334:	617b      	str	r3, [r7, #20]
 800c336:	e009      	b.n	800c34c <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	60ba      	str	r2, [r7, #8]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	4618      	mov	r0, r3
 800c342:	f000 f8e7 	bl	800c514 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	3301      	adds	r3, #1
 800c34a:	617b      	str	r3, [r7, #20]
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	429a      	cmp	r2, r3
 800c352:	dbf1      	blt.n	800c338 <_write+0x12>
  }
  return len;
 800c354:	687b      	ldr	r3, [r7, #4]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <_close>:

int _close(int file)
{
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c376:	b480      	push	{r7}
 800c378:	b083      	sub	sp, #12
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c386:	605a      	str	r2, [r3, #4]
  return 0;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	370c      	adds	r7, #12
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr

0800c396 <_isatty>:

int _isatty(int file)
{
 800c396:	b480      	push	{r7}
 800c398:	b083      	sub	sp, #12
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c39e:	2301      	movs	r3, #1
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	370c      	adds	r7, #12
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
	...

0800c3c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c3d0:	4a14      	ldr	r2, [pc, #80]	@ (800c424 <_sbrk+0x5c>)
 800c3d2:	4b15      	ldr	r3, [pc, #84]	@ (800c428 <_sbrk+0x60>)
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c3dc:	4b13      	ldr	r3, [pc, #76]	@ (800c42c <_sbrk+0x64>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c3e4:	4b11      	ldr	r3, [pc, #68]	@ (800c42c <_sbrk+0x64>)
 800c3e6:	4a12      	ldr	r2, [pc, #72]	@ (800c430 <_sbrk+0x68>)
 800c3e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c3ea:	4b10      	ldr	r3, [pc, #64]	@ (800c42c <_sbrk+0x64>)
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d207      	bcs.n	800c408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c3f8:	f000 fb22 	bl	800ca40 <__errno>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	220c      	movs	r2, #12
 800c400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c402:	f04f 33ff 	mov.w	r3, #4294967295
 800c406:	e009      	b.n	800c41c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c408:	4b08      	ldr	r3, [pc, #32]	@ (800c42c <_sbrk+0x64>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c40e:	4b07      	ldr	r3, [pc, #28]	@ (800c42c <_sbrk+0x64>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4413      	add	r3, r2
 800c416:	4a05      	ldr	r2, [pc, #20]	@ (800c42c <_sbrk+0x64>)
 800c418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c41a:	68fb      	ldr	r3, [r7, #12]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	20020000 	.word	0x20020000
 800c428:	00000400 	.word	0x00000400
 800c42c:	20000078 	.word	0x20000078
 800c430:	200001d0 	.word	0x200001d0

0800c434 <delay>:
#define MAX_DELAY 0xffffffff

volatile uint32_t g_cur_tick;
volatile uint32_t g_cur_tick_p;

void delay(uint32_t delay){
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = get_tick();
 800c43c:	f000 f818 	bl	800c470 <get_tick>
 800c440:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	60fb      	str	r3, [r7, #12]

	if(wait<MAX_DELAY){
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44c:	d002      	beq.n	800c454 <delay+0x20>
		wait += TICK_FREQ;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	60fb      	str	r3, [r7, #12]
	}// bù sai số thời gian do thời điểm đọc tick không chính xác ngay khi vào hàm.

	while(get_tick()-tickstart<wait){}
 800c454:	bf00      	nop
 800c456:	f000 f80b 	bl	800c470 <get_tick>
 800c45a:	4602      	mov	r2, r0
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	429a      	cmp	r2, r3
 800c464:	d8f7      	bhi.n	800c456 <delay+0x22>
}
 800c466:	bf00      	nop
 800c468:	bf00      	nop
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <get_tick>:

uint32_t get_tick(){
 800c470:	b480      	push	{r7}
 800c472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c474:	b672      	cpsid	i
}
 800c476:	bf00      	nop
	__disable_irq();
	g_cur_tick_p = g_cur_tick;
 800c478:	4b06      	ldr	r3, [pc, #24]	@ (800c494 <get_tick+0x24>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a06      	ldr	r2, [pc, #24]	@ (800c498 <get_tick+0x28>)
 800c47e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c480:	b662      	cpsie	i
}
 800c482:	bf00      	nop
	__enable_irq();

	return g_cur_tick_p;
 800c484:	4b04      	ldr	r3, [pc, #16]	@ (800c498 <get_tick+0x28>)
 800c486:	681b      	ldr	r3, [r3, #0]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	2000007c 	.word	0x2000007c
 800c498:	20000080 	.word	0x20000080

0800c49c <tick_increment>:
void tick_increment(){
 800c49c:	b480      	push	{r7}
 800c49e:	af00      	add	r7, sp, #0
	g_cur_tick += TICK_FREQ;
 800c4a0:	4b04      	ldr	r3, [pc, #16]	@ (800c4b4 <tick_increment+0x18>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	4a03      	ldr	r2, [pc, #12]	@ (800c4b4 <tick_increment+0x18>)
 800c4a8:	6013      	str	r3, [r2, #0]
}
 800c4aa:	bf00      	nop
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr
 800c4b4:	2000007c 	.word	0x2000007c

0800c4b8 <timebase_init>:

void timebase_init(void){
 800c4b8:	b480      	push	{r7}
 800c4ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c4bc:	b672      	cpsid	i
}
 800c4be:	bf00      	nop

	/*Disable global Interrupts*/
	__disable_irq();
	/*Load the timer with the number of clock cycle per second */
    SysTick->LOAD = ONE_SEC_LOAD - 1;
 800c4c0:	4b0f      	ldr	r3, [pc, #60]	@ (800c500 <timebase_init+0x48>)
 800c4c2:	4a10      	ldr	r2, [pc, #64]	@ (800c504 <timebase_init+0x4c>)
 800c4c4:	605a      	str	r2, [r3, #4]
	/*clear systick current value register */
    SysTick->VAL = 0;
 800c4c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c500 <timebase_init+0x48>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	609a      	str	r2, [r3, #8]
	/*select internal clock source */
    SysTick->CTRL |= CTRL_CLKSOURCE;
 800c4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c500 <timebase_init+0x48>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a0b      	ldr	r2, [pc, #44]	@ (800c500 <timebase_init+0x48>)
 800c4d2:	f043 0304 	orr.w	r3, r3, #4
 800c4d6:	6013      	str	r3, [r2, #0]
	/*Enable Interrupts*/
    SysTick->CTRL |= CTRL_TICKINT;
 800c4d8:	4b09      	ldr	r3, [pc, #36]	@ (800c500 <timebase_init+0x48>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a08      	ldr	r2, [pc, #32]	@ (800c500 <timebase_init+0x48>)
 800c4de:	f043 0302 	orr.w	r3, r3, #2
 800c4e2:	6013      	str	r3, [r2, #0]
	/*Enable Systick*/
    SysTick->CTRL |= CTRL_ENABLE ;
 800c4e4:	4b06      	ldr	r3, [pc, #24]	@ (800c500 <timebase_init+0x48>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a05      	ldr	r2, [pc, #20]	@ (800c500 <timebase_init+0x48>)
 800c4ea:	f043 0301 	orr.w	r3, r3, #1
 800c4ee:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c4f0:	b662      	cpsie	i
}
 800c4f2:	bf00      	nop
	/*Enable global Interrupts*/
	__enable_irq();

}
 800c4f4:	bf00      	nop
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	e000e010 	.word	0xe000e010
 800c504:	00f423ff 	.word	0x00f423ff

0800c508 <SysTick_Handler>:

void SysTick_Handler(void){
 800c508:	b580      	push	{r7, lr}
 800c50a:	af00      	add	r7, sp, #0
	tick_increment();
 800c50c:	f7ff ffc6 	bl	800c49c <tick_increment>
}
 800c510:	bf00      	nop
 800c512:	bd80      	pop	{r7, pc}

0800c514 <__io_putchar>:
#define CR1_UE (1U<<13)
#define SR_TXE (1U<<7)

static void usart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);
int __io_putchar(int ch) {
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f805 	bl	800c52c <uart_write>
	return ch;
 800c522:	687b      	ldr	r3, [r7, #4]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <uart_write>:
	USART2->CR1 |= CR1_TE;
	/* Enable Uart module */
	USART2->CR1 |= CR1_UE;
}

static void uart_write(int ch) {
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
	/* make sure transmit data reg is empty*/
	while (!(USART2->SR & SR_TXE)) {
 800c534:	bf00      	nop
 800c536:	4b09      	ldr	r3, [pc, #36]	@ (800c55c <uart_write+0x30>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d0f9      	beq.n	800c536 <uart_write+0xa>
	}
	/* write to transmit data register */
	USART2->DR |= ch & 0xff;
 800c542:	4b06      	ldr	r3, [pc, #24]	@ (800c55c <uart_write+0x30>)
 800c544:	685a      	ldr	r2, [r3, #4]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	4904      	ldr	r1, [pc, #16]	@ (800c55c <uart_write+0x30>)
 800c54c:	4313      	orrs	r3, r2
 800c54e:	604b      	str	r3, [r1, #4]
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	40004400 	.word	0x40004400

0800c560 <Reset_Handler>:
 800c560:	480d      	ldr	r0, [pc, #52]	@ (800c598 <LoopForever+0x2>)
 800c562:	4685      	mov	sp, r0
 800c564:	f7ff fe9e 	bl	800c2a4 <SystemInit>
 800c568:	480c      	ldr	r0, [pc, #48]	@ (800c59c <LoopForever+0x6>)
 800c56a:	490d      	ldr	r1, [pc, #52]	@ (800c5a0 <LoopForever+0xa>)
 800c56c:	4a0d      	ldr	r2, [pc, #52]	@ (800c5a4 <LoopForever+0xe>)
 800c56e:	2300      	movs	r3, #0
 800c570:	e002      	b.n	800c578 <LoopCopyDataInit>

0800c572 <CopyDataInit>:
 800c572:	58d4      	ldr	r4, [r2, r3]
 800c574:	50c4      	str	r4, [r0, r3]
 800c576:	3304      	adds	r3, #4

0800c578 <LoopCopyDataInit>:
 800c578:	18c4      	adds	r4, r0, r3
 800c57a:	428c      	cmp	r4, r1
 800c57c:	d3f9      	bcc.n	800c572 <CopyDataInit>
 800c57e:	4a0a      	ldr	r2, [pc, #40]	@ (800c5a8 <LoopForever+0x12>)
 800c580:	4c0a      	ldr	r4, [pc, #40]	@ (800c5ac <LoopForever+0x16>)
 800c582:	2300      	movs	r3, #0
 800c584:	e001      	b.n	800c58a <LoopFillZerobss>

0800c586 <FillZerobss>:
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	3204      	adds	r2, #4

0800c58a <LoopFillZerobss>:
 800c58a:	42a2      	cmp	r2, r4
 800c58c:	d3fb      	bcc.n	800c586 <FillZerobss>
 800c58e:	f000 fa5d 	bl	800ca4c <__libc_init_array>
 800c592:	f7ff fe95 	bl	800c2c0 <main>

0800c596 <LoopForever>:
 800c596:	e7fe      	b.n	800c596 <LoopForever>
 800c598:	20020000 	.word	0x20020000
 800c59c:	20000000 	.word	0x20000000
 800c5a0:	2000005c 	.word	0x2000005c
 800c5a4:	0800cf4c 	.word	0x0800cf4c
 800c5a8:	2000005c 	.word	0x2000005c
 800c5ac:	200001d0 	.word	0x200001d0

0800c5b0 <ADC_IRQHandler>:
 800c5b0:	e7fe      	b.n	800c5b0 <ADC_IRQHandler>
	...

0800c5b4 <std>:
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	b510      	push	{r4, lr}
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c5be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5c2:	6083      	str	r3, [r0, #8]
 800c5c4:	8181      	strh	r1, [r0, #12]
 800c5c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5c8:	81c2      	strh	r2, [r0, #14]
 800c5ca:	6183      	str	r3, [r0, #24]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	2208      	movs	r2, #8
 800c5d0:	305c      	adds	r0, #92	@ 0x5c
 800c5d2:	f000 f9e7 	bl	800c9a4 <memset>
 800c5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c60c <std+0x58>)
 800c5d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5da:	4b0d      	ldr	r3, [pc, #52]	@ (800c610 <std+0x5c>)
 800c5dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5de:	4b0d      	ldr	r3, [pc, #52]	@ (800c614 <std+0x60>)
 800c5e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c618 <std+0x64>)
 800c5e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c61c <std+0x68>)
 800c5e8:	6224      	str	r4, [r4, #32]
 800c5ea:	429c      	cmp	r4, r3
 800c5ec:	d006      	beq.n	800c5fc <std+0x48>
 800c5ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5f2:	4294      	cmp	r4, r2
 800c5f4:	d002      	beq.n	800c5fc <std+0x48>
 800c5f6:	33d0      	adds	r3, #208	@ 0xd0
 800c5f8:	429c      	cmp	r4, r3
 800c5fa:	d105      	bne.n	800c608 <std+0x54>
 800c5fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c604:	f000 ba46 	b.w	800ca94 <__retarget_lock_init_recursive>
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	bf00      	nop
 800c60c:	0800c7f5 	.word	0x0800c7f5
 800c610:	0800c817 	.word	0x0800c817
 800c614:	0800c84f 	.word	0x0800c84f
 800c618:	0800c873 	.word	0x0800c873
 800c61c:	20000084 	.word	0x20000084

0800c620 <stdio_exit_handler>:
 800c620:	4a02      	ldr	r2, [pc, #8]	@ (800c62c <stdio_exit_handler+0xc>)
 800c622:	4903      	ldr	r1, [pc, #12]	@ (800c630 <stdio_exit_handler+0x10>)
 800c624:	4803      	ldr	r0, [pc, #12]	@ (800c634 <stdio_exit_handler+0x14>)
 800c626:	f000 b869 	b.w	800c6fc <_fwalk_sglue>
 800c62a:	bf00      	nop
 800c62c:	20000000 	.word	0x20000000
 800c630:	0800cd95 	.word	0x0800cd95
 800c634:	20000010 	.word	0x20000010

0800c638 <cleanup_stdio>:
 800c638:	6841      	ldr	r1, [r0, #4]
 800c63a:	4b0c      	ldr	r3, [pc, #48]	@ (800c66c <cleanup_stdio+0x34>)
 800c63c:	4299      	cmp	r1, r3
 800c63e:	b510      	push	{r4, lr}
 800c640:	4604      	mov	r4, r0
 800c642:	d001      	beq.n	800c648 <cleanup_stdio+0x10>
 800c644:	f000 fba6 	bl	800cd94 <_fflush_r>
 800c648:	68a1      	ldr	r1, [r4, #8]
 800c64a:	4b09      	ldr	r3, [pc, #36]	@ (800c670 <cleanup_stdio+0x38>)
 800c64c:	4299      	cmp	r1, r3
 800c64e:	d002      	beq.n	800c656 <cleanup_stdio+0x1e>
 800c650:	4620      	mov	r0, r4
 800c652:	f000 fb9f 	bl	800cd94 <_fflush_r>
 800c656:	68e1      	ldr	r1, [r4, #12]
 800c658:	4b06      	ldr	r3, [pc, #24]	@ (800c674 <cleanup_stdio+0x3c>)
 800c65a:	4299      	cmp	r1, r3
 800c65c:	d004      	beq.n	800c668 <cleanup_stdio+0x30>
 800c65e:	4620      	mov	r0, r4
 800c660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c664:	f000 bb96 	b.w	800cd94 <_fflush_r>
 800c668:	bd10      	pop	{r4, pc}
 800c66a:	bf00      	nop
 800c66c:	20000084 	.word	0x20000084
 800c670:	200000ec 	.word	0x200000ec
 800c674:	20000154 	.word	0x20000154

0800c678 <global_stdio_init.part.0>:
 800c678:	b510      	push	{r4, lr}
 800c67a:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a8 <global_stdio_init.part.0+0x30>)
 800c67c:	4c0b      	ldr	r4, [pc, #44]	@ (800c6ac <global_stdio_init.part.0+0x34>)
 800c67e:	4a0c      	ldr	r2, [pc, #48]	@ (800c6b0 <global_stdio_init.part.0+0x38>)
 800c680:	601a      	str	r2, [r3, #0]
 800c682:	4620      	mov	r0, r4
 800c684:	2200      	movs	r2, #0
 800c686:	2104      	movs	r1, #4
 800c688:	f7ff ff94 	bl	800c5b4 <std>
 800c68c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c690:	2201      	movs	r2, #1
 800c692:	2109      	movs	r1, #9
 800c694:	f7ff ff8e 	bl	800c5b4 <std>
 800c698:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c69c:	2202      	movs	r2, #2
 800c69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a2:	2112      	movs	r1, #18
 800c6a4:	f7ff bf86 	b.w	800c5b4 <std>
 800c6a8:	200001bc 	.word	0x200001bc
 800c6ac:	20000084 	.word	0x20000084
 800c6b0:	0800c621 	.word	0x0800c621

0800c6b4 <__sfp_lock_acquire>:
 800c6b4:	4801      	ldr	r0, [pc, #4]	@ (800c6bc <__sfp_lock_acquire+0x8>)
 800c6b6:	f000 b9ee 	b.w	800ca96 <__retarget_lock_acquire_recursive>
 800c6ba:	bf00      	nop
 800c6bc:	200001c5 	.word	0x200001c5

0800c6c0 <__sfp_lock_release>:
 800c6c0:	4801      	ldr	r0, [pc, #4]	@ (800c6c8 <__sfp_lock_release+0x8>)
 800c6c2:	f000 b9e9 	b.w	800ca98 <__retarget_lock_release_recursive>
 800c6c6:	bf00      	nop
 800c6c8:	200001c5 	.word	0x200001c5

0800c6cc <__sinit>:
 800c6cc:	b510      	push	{r4, lr}
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	f7ff fff0 	bl	800c6b4 <__sfp_lock_acquire>
 800c6d4:	6a23      	ldr	r3, [r4, #32]
 800c6d6:	b11b      	cbz	r3, 800c6e0 <__sinit+0x14>
 800c6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6dc:	f7ff bff0 	b.w	800c6c0 <__sfp_lock_release>
 800c6e0:	4b04      	ldr	r3, [pc, #16]	@ (800c6f4 <__sinit+0x28>)
 800c6e2:	6223      	str	r3, [r4, #32]
 800c6e4:	4b04      	ldr	r3, [pc, #16]	@ (800c6f8 <__sinit+0x2c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1f5      	bne.n	800c6d8 <__sinit+0xc>
 800c6ec:	f7ff ffc4 	bl	800c678 <global_stdio_init.part.0>
 800c6f0:	e7f2      	b.n	800c6d8 <__sinit+0xc>
 800c6f2:	bf00      	nop
 800c6f4:	0800c639 	.word	0x0800c639
 800c6f8:	200001bc 	.word	0x200001bc

0800c6fc <_fwalk_sglue>:
 800c6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c700:	4607      	mov	r7, r0
 800c702:	4688      	mov	r8, r1
 800c704:	4614      	mov	r4, r2
 800c706:	2600      	movs	r6, #0
 800c708:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c70c:	f1b9 0901 	subs.w	r9, r9, #1
 800c710:	d505      	bpl.n	800c71e <_fwalk_sglue+0x22>
 800c712:	6824      	ldr	r4, [r4, #0]
 800c714:	2c00      	cmp	r4, #0
 800c716:	d1f7      	bne.n	800c708 <_fwalk_sglue+0xc>
 800c718:	4630      	mov	r0, r6
 800c71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d907      	bls.n	800c734 <_fwalk_sglue+0x38>
 800c724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c728:	3301      	adds	r3, #1
 800c72a:	d003      	beq.n	800c734 <_fwalk_sglue+0x38>
 800c72c:	4629      	mov	r1, r5
 800c72e:	4638      	mov	r0, r7
 800c730:	47c0      	blx	r8
 800c732:	4306      	orrs	r6, r0
 800c734:	3568      	adds	r5, #104	@ 0x68
 800c736:	e7e9      	b.n	800c70c <_fwalk_sglue+0x10>

0800c738 <_puts_r>:
 800c738:	6a03      	ldr	r3, [r0, #32]
 800c73a:	b570      	push	{r4, r5, r6, lr}
 800c73c:	6884      	ldr	r4, [r0, #8]
 800c73e:	4605      	mov	r5, r0
 800c740:	460e      	mov	r6, r1
 800c742:	b90b      	cbnz	r3, 800c748 <_puts_r+0x10>
 800c744:	f7ff ffc2 	bl	800c6cc <__sinit>
 800c748:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c74a:	07db      	lsls	r3, r3, #31
 800c74c:	d405      	bmi.n	800c75a <_puts_r+0x22>
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	0598      	lsls	r0, r3, #22
 800c752:	d402      	bmi.n	800c75a <_puts_r+0x22>
 800c754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c756:	f000 f99e 	bl	800ca96 <__retarget_lock_acquire_recursive>
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	0719      	lsls	r1, r3, #28
 800c75e:	d502      	bpl.n	800c766 <_puts_r+0x2e>
 800c760:	6923      	ldr	r3, [r4, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d135      	bne.n	800c7d2 <_puts_r+0x9a>
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	f000 f8c5 	bl	800c8f8 <__swsetup_r>
 800c76e:	b380      	cbz	r0, 800c7d2 <_puts_r+0x9a>
 800c770:	f04f 35ff 	mov.w	r5, #4294967295
 800c774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c776:	07da      	lsls	r2, r3, #31
 800c778:	d405      	bmi.n	800c786 <_puts_r+0x4e>
 800c77a:	89a3      	ldrh	r3, [r4, #12]
 800c77c:	059b      	lsls	r3, r3, #22
 800c77e:	d402      	bmi.n	800c786 <_puts_r+0x4e>
 800c780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c782:	f000 f989 	bl	800ca98 <__retarget_lock_release_recursive>
 800c786:	4628      	mov	r0, r5
 800c788:	bd70      	pop	{r4, r5, r6, pc}
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	da04      	bge.n	800c798 <_puts_r+0x60>
 800c78e:	69a2      	ldr	r2, [r4, #24]
 800c790:	429a      	cmp	r2, r3
 800c792:	dc17      	bgt.n	800c7c4 <_puts_r+0x8c>
 800c794:	290a      	cmp	r1, #10
 800c796:	d015      	beq.n	800c7c4 <_puts_r+0x8c>
 800c798:	6823      	ldr	r3, [r4, #0]
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	6022      	str	r2, [r4, #0]
 800c79e:	7019      	strb	r1, [r3, #0]
 800c7a0:	68a3      	ldr	r3, [r4, #8]
 800c7a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	60a3      	str	r3, [r4, #8]
 800c7aa:	2900      	cmp	r1, #0
 800c7ac:	d1ed      	bne.n	800c78a <_puts_r+0x52>
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	da11      	bge.n	800c7d6 <_puts_r+0x9e>
 800c7b2:	4622      	mov	r2, r4
 800c7b4:	210a      	movs	r1, #10
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f000 f85f 	bl	800c87a <__swbuf_r>
 800c7bc:	3001      	adds	r0, #1
 800c7be:	d0d7      	beq.n	800c770 <_puts_r+0x38>
 800c7c0:	250a      	movs	r5, #10
 800c7c2:	e7d7      	b.n	800c774 <_puts_r+0x3c>
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	f000 f857 	bl	800c87a <__swbuf_r>
 800c7cc:	3001      	adds	r0, #1
 800c7ce:	d1e7      	bne.n	800c7a0 <_puts_r+0x68>
 800c7d0:	e7ce      	b.n	800c770 <_puts_r+0x38>
 800c7d2:	3e01      	subs	r6, #1
 800c7d4:	e7e4      	b.n	800c7a0 <_puts_r+0x68>
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	1c5a      	adds	r2, r3, #1
 800c7da:	6022      	str	r2, [r4, #0]
 800c7dc:	220a      	movs	r2, #10
 800c7de:	701a      	strb	r2, [r3, #0]
 800c7e0:	e7ee      	b.n	800c7c0 <_puts_r+0x88>
	...

0800c7e4 <puts>:
 800c7e4:	4b02      	ldr	r3, [pc, #8]	@ (800c7f0 <puts+0xc>)
 800c7e6:	4601      	mov	r1, r0
 800c7e8:	6818      	ldr	r0, [r3, #0]
 800c7ea:	f7ff bfa5 	b.w	800c738 <_puts_r>
 800c7ee:	bf00      	nop
 800c7f0:	2000000c 	.word	0x2000000c

0800c7f4 <__sread>:
 800c7f4:	b510      	push	{r4, lr}
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7fc:	f000 f8fc 	bl	800c9f8 <_read_r>
 800c800:	2800      	cmp	r0, #0
 800c802:	bfab      	itete	ge
 800c804:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c806:	89a3      	ldrhlt	r3, [r4, #12]
 800c808:	181b      	addge	r3, r3, r0
 800c80a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c80e:	bfac      	ite	ge
 800c810:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c812:	81a3      	strhlt	r3, [r4, #12]
 800c814:	bd10      	pop	{r4, pc}

0800c816 <__swrite>:
 800c816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c81a:	461f      	mov	r7, r3
 800c81c:	898b      	ldrh	r3, [r1, #12]
 800c81e:	05db      	lsls	r3, r3, #23
 800c820:	4605      	mov	r5, r0
 800c822:	460c      	mov	r4, r1
 800c824:	4616      	mov	r6, r2
 800c826:	d505      	bpl.n	800c834 <__swrite+0x1e>
 800c828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c82c:	2302      	movs	r3, #2
 800c82e:	2200      	movs	r2, #0
 800c830:	f000 f8d0 	bl	800c9d4 <_lseek_r>
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c83a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c83e:	81a3      	strh	r3, [r4, #12]
 800c840:	4632      	mov	r2, r6
 800c842:	463b      	mov	r3, r7
 800c844:	4628      	mov	r0, r5
 800c846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c84a:	f000 b8e7 	b.w	800ca1c <_write_r>

0800c84e <__sseek>:
 800c84e:	b510      	push	{r4, lr}
 800c850:	460c      	mov	r4, r1
 800c852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c856:	f000 f8bd 	bl	800c9d4 <_lseek_r>
 800c85a:	1c43      	adds	r3, r0, #1
 800c85c:	89a3      	ldrh	r3, [r4, #12]
 800c85e:	bf15      	itete	ne
 800c860:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c862:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c866:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c86a:	81a3      	strheq	r3, [r4, #12]
 800c86c:	bf18      	it	ne
 800c86e:	81a3      	strhne	r3, [r4, #12]
 800c870:	bd10      	pop	{r4, pc}

0800c872 <__sclose>:
 800c872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c876:	f000 b89d 	b.w	800c9b4 <_close_r>

0800c87a <__swbuf_r>:
 800c87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87c:	460e      	mov	r6, r1
 800c87e:	4614      	mov	r4, r2
 800c880:	4605      	mov	r5, r0
 800c882:	b118      	cbz	r0, 800c88c <__swbuf_r+0x12>
 800c884:	6a03      	ldr	r3, [r0, #32]
 800c886:	b90b      	cbnz	r3, 800c88c <__swbuf_r+0x12>
 800c888:	f7ff ff20 	bl	800c6cc <__sinit>
 800c88c:	69a3      	ldr	r3, [r4, #24]
 800c88e:	60a3      	str	r3, [r4, #8]
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	071a      	lsls	r2, r3, #28
 800c894:	d501      	bpl.n	800c89a <__swbuf_r+0x20>
 800c896:	6923      	ldr	r3, [r4, #16]
 800c898:	b943      	cbnz	r3, 800c8ac <__swbuf_r+0x32>
 800c89a:	4621      	mov	r1, r4
 800c89c:	4628      	mov	r0, r5
 800c89e:	f000 f82b 	bl	800c8f8 <__swsetup_r>
 800c8a2:	b118      	cbz	r0, 800c8ac <__swbuf_r+0x32>
 800c8a4:	f04f 37ff 	mov.w	r7, #4294967295
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	6922      	ldr	r2, [r4, #16]
 800c8b0:	1a98      	subs	r0, r3, r2
 800c8b2:	6963      	ldr	r3, [r4, #20]
 800c8b4:	b2f6      	uxtb	r6, r6
 800c8b6:	4283      	cmp	r3, r0
 800c8b8:	4637      	mov	r7, r6
 800c8ba:	dc05      	bgt.n	800c8c8 <__swbuf_r+0x4e>
 800c8bc:	4621      	mov	r1, r4
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f000 fa68 	bl	800cd94 <_fflush_r>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d1ed      	bne.n	800c8a4 <__swbuf_r+0x2a>
 800c8c8:	68a3      	ldr	r3, [r4, #8]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	60a3      	str	r3, [r4, #8]
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	1c5a      	adds	r2, r3, #1
 800c8d2:	6022      	str	r2, [r4, #0]
 800c8d4:	701e      	strb	r6, [r3, #0]
 800c8d6:	6962      	ldr	r2, [r4, #20]
 800c8d8:	1c43      	adds	r3, r0, #1
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d004      	beq.n	800c8e8 <__swbuf_r+0x6e>
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	07db      	lsls	r3, r3, #31
 800c8e2:	d5e1      	bpl.n	800c8a8 <__swbuf_r+0x2e>
 800c8e4:	2e0a      	cmp	r6, #10
 800c8e6:	d1df      	bne.n	800c8a8 <__swbuf_r+0x2e>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f000 fa52 	bl	800cd94 <_fflush_r>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d0d9      	beq.n	800c8a8 <__swbuf_r+0x2e>
 800c8f4:	e7d6      	b.n	800c8a4 <__swbuf_r+0x2a>
	...

0800c8f8 <__swsetup_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4b29      	ldr	r3, [pc, #164]	@ (800c9a0 <__swsetup_r+0xa8>)
 800c8fc:	4605      	mov	r5, r0
 800c8fe:	6818      	ldr	r0, [r3, #0]
 800c900:	460c      	mov	r4, r1
 800c902:	b118      	cbz	r0, 800c90c <__swsetup_r+0x14>
 800c904:	6a03      	ldr	r3, [r0, #32]
 800c906:	b90b      	cbnz	r3, 800c90c <__swsetup_r+0x14>
 800c908:	f7ff fee0 	bl	800c6cc <__sinit>
 800c90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c910:	0719      	lsls	r1, r3, #28
 800c912:	d422      	bmi.n	800c95a <__swsetup_r+0x62>
 800c914:	06da      	lsls	r2, r3, #27
 800c916:	d407      	bmi.n	800c928 <__swsetup_r+0x30>
 800c918:	2209      	movs	r2, #9
 800c91a:	602a      	str	r2, [r5, #0]
 800c91c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	f04f 30ff 	mov.w	r0, #4294967295
 800c926:	e033      	b.n	800c990 <__swsetup_r+0x98>
 800c928:	0758      	lsls	r0, r3, #29
 800c92a:	d512      	bpl.n	800c952 <__swsetup_r+0x5a>
 800c92c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c92e:	b141      	cbz	r1, 800c942 <__swsetup_r+0x4a>
 800c930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c934:	4299      	cmp	r1, r3
 800c936:	d002      	beq.n	800c93e <__swsetup_r+0x46>
 800c938:	4628      	mov	r0, r5
 800c93a:	f000 f8af 	bl	800ca9c <_free_r>
 800c93e:	2300      	movs	r3, #0
 800c940:	6363      	str	r3, [r4, #52]	@ 0x34
 800c942:	89a3      	ldrh	r3, [r4, #12]
 800c944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c948:	81a3      	strh	r3, [r4, #12]
 800c94a:	2300      	movs	r3, #0
 800c94c:	6063      	str	r3, [r4, #4]
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	f043 0308 	orr.w	r3, r3, #8
 800c958:	81a3      	strh	r3, [r4, #12]
 800c95a:	6923      	ldr	r3, [r4, #16]
 800c95c:	b94b      	cbnz	r3, 800c972 <__swsetup_r+0x7a>
 800c95e:	89a3      	ldrh	r3, [r4, #12]
 800c960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c968:	d003      	beq.n	800c972 <__swsetup_r+0x7a>
 800c96a:	4621      	mov	r1, r4
 800c96c:	4628      	mov	r0, r5
 800c96e:	f000 fa5f 	bl	800ce30 <__smakebuf_r>
 800c972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c976:	f013 0201 	ands.w	r2, r3, #1
 800c97a:	d00a      	beq.n	800c992 <__swsetup_r+0x9a>
 800c97c:	2200      	movs	r2, #0
 800c97e:	60a2      	str	r2, [r4, #8]
 800c980:	6962      	ldr	r2, [r4, #20]
 800c982:	4252      	negs	r2, r2
 800c984:	61a2      	str	r2, [r4, #24]
 800c986:	6922      	ldr	r2, [r4, #16]
 800c988:	b942      	cbnz	r2, 800c99c <__swsetup_r+0xa4>
 800c98a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c98e:	d1c5      	bne.n	800c91c <__swsetup_r+0x24>
 800c990:	bd38      	pop	{r3, r4, r5, pc}
 800c992:	0799      	lsls	r1, r3, #30
 800c994:	bf58      	it	pl
 800c996:	6962      	ldrpl	r2, [r4, #20]
 800c998:	60a2      	str	r2, [r4, #8]
 800c99a:	e7f4      	b.n	800c986 <__swsetup_r+0x8e>
 800c99c:	2000      	movs	r0, #0
 800c99e:	e7f7      	b.n	800c990 <__swsetup_r+0x98>
 800c9a0:	2000000c 	.word	0x2000000c

0800c9a4 <memset>:
 800c9a4:	4402      	add	r2, r0
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d100      	bne.n	800c9ae <memset+0xa>
 800c9ac:	4770      	bx	lr
 800c9ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c9b2:	e7f9      	b.n	800c9a8 <memset+0x4>

0800c9b4 <_close_r>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	4d06      	ldr	r5, [pc, #24]	@ (800c9d0 <_close_r+0x1c>)
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	4608      	mov	r0, r1
 800c9be:	602b      	str	r3, [r5, #0]
 800c9c0:	f7ff fccd 	bl	800c35e <_close>
 800c9c4:	1c43      	adds	r3, r0, #1
 800c9c6:	d102      	bne.n	800c9ce <_close_r+0x1a>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	b103      	cbz	r3, 800c9ce <_close_r+0x1a>
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
 800c9d0:	200001c0 	.word	0x200001c0

0800c9d4 <_lseek_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4d07      	ldr	r5, [pc, #28]	@ (800c9f4 <_lseek_r+0x20>)
 800c9d8:	4604      	mov	r4, r0
 800c9da:	4608      	mov	r0, r1
 800c9dc:	4611      	mov	r1, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	602a      	str	r2, [r5, #0]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f7ff fce2 	bl	800c3ac <_lseek>
 800c9e8:	1c43      	adds	r3, r0, #1
 800c9ea:	d102      	bne.n	800c9f2 <_lseek_r+0x1e>
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	b103      	cbz	r3, 800c9f2 <_lseek_r+0x1e>
 800c9f0:	6023      	str	r3, [r4, #0]
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	200001c0 	.word	0x200001c0

0800c9f8 <_read_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4d07      	ldr	r5, [pc, #28]	@ (800ca18 <_read_r+0x20>)
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	4608      	mov	r0, r1
 800ca00:	4611      	mov	r1, r2
 800ca02:	2200      	movs	r2, #0
 800ca04:	602a      	str	r2, [r5, #0]
 800ca06:	461a      	mov	r2, r3
 800ca08:	f7ff fc70 	bl	800c2ec <_read>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d102      	bne.n	800ca16 <_read_r+0x1e>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	b103      	cbz	r3, 800ca16 <_read_r+0x1e>
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	200001c0 	.word	0x200001c0

0800ca1c <_write_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d07      	ldr	r5, [pc, #28]	@ (800ca3c <_write_r+0x20>)
 800ca20:	4604      	mov	r4, r0
 800ca22:	4608      	mov	r0, r1
 800ca24:	4611      	mov	r1, r2
 800ca26:	2200      	movs	r2, #0
 800ca28:	602a      	str	r2, [r5, #0]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	f7ff fc7b 	bl	800c326 <_write>
 800ca30:	1c43      	adds	r3, r0, #1
 800ca32:	d102      	bne.n	800ca3a <_write_r+0x1e>
 800ca34:	682b      	ldr	r3, [r5, #0]
 800ca36:	b103      	cbz	r3, 800ca3a <_write_r+0x1e>
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	bd38      	pop	{r3, r4, r5, pc}
 800ca3c:	200001c0 	.word	0x200001c0

0800ca40 <__errno>:
 800ca40:	4b01      	ldr	r3, [pc, #4]	@ (800ca48 <__errno+0x8>)
 800ca42:	6818      	ldr	r0, [r3, #0]
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	2000000c 	.word	0x2000000c

0800ca4c <__libc_init_array>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ca84 <__libc_init_array+0x38>)
 800ca50:	4c0d      	ldr	r4, [pc, #52]	@ (800ca88 <__libc_init_array+0x3c>)
 800ca52:	1b64      	subs	r4, r4, r5
 800ca54:	10a4      	asrs	r4, r4, #2
 800ca56:	2600      	movs	r6, #0
 800ca58:	42a6      	cmp	r6, r4
 800ca5a:	d109      	bne.n	800ca70 <__libc_init_array+0x24>
 800ca5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ca8c <__libc_init_array+0x40>)
 800ca5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ca90 <__libc_init_array+0x44>)
 800ca60:	f000 fa54 	bl	800cf0c <_init>
 800ca64:	1b64      	subs	r4, r4, r5
 800ca66:	10a4      	asrs	r4, r4, #2
 800ca68:	2600      	movs	r6, #0
 800ca6a:	42a6      	cmp	r6, r4
 800ca6c:	d105      	bne.n	800ca7a <__libc_init_array+0x2e>
 800ca6e:	bd70      	pop	{r4, r5, r6, pc}
 800ca70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca74:	4798      	blx	r3
 800ca76:	3601      	adds	r6, #1
 800ca78:	e7ee      	b.n	800ca58 <__libc_init_array+0xc>
 800ca7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca7e:	4798      	blx	r3
 800ca80:	3601      	adds	r6, #1
 800ca82:	e7f2      	b.n	800ca6a <__libc_init_array+0x1e>
 800ca84:	0800cf44 	.word	0x0800cf44
 800ca88:	0800cf44 	.word	0x0800cf44
 800ca8c:	0800cf44 	.word	0x0800cf44
 800ca90:	0800cf48 	.word	0x0800cf48

0800ca94 <__retarget_lock_init_recursive>:
 800ca94:	4770      	bx	lr

0800ca96 <__retarget_lock_acquire_recursive>:
 800ca96:	4770      	bx	lr

0800ca98 <__retarget_lock_release_recursive>:
 800ca98:	4770      	bx	lr
	...

0800ca9c <_free_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4605      	mov	r5, r0
 800caa0:	2900      	cmp	r1, #0
 800caa2:	d041      	beq.n	800cb28 <_free_r+0x8c>
 800caa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caa8:	1f0c      	subs	r4, r1, #4
 800caaa:	2b00      	cmp	r3, #0
 800caac:	bfb8      	it	lt
 800caae:	18e4      	addlt	r4, r4, r3
 800cab0:	f000 f8e0 	bl	800cc74 <__malloc_lock>
 800cab4:	4a1d      	ldr	r2, [pc, #116]	@ (800cb2c <_free_r+0x90>)
 800cab6:	6813      	ldr	r3, [r2, #0]
 800cab8:	b933      	cbnz	r3, 800cac8 <_free_r+0x2c>
 800caba:	6063      	str	r3, [r4, #4]
 800cabc:	6014      	str	r4, [r2, #0]
 800cabe:	4628      	mov	r0, r5
 800cac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cac4:	f000 b8dc 	b.w	800cc80 <__malloc_unlock>
 800cac8:	42a3      	cmp	r3, r4
 800caca:	d908      	bls.n	800cade <_free_r+0x42>
 800cacc:	6820      	ldr	r0, [r4, #0]
 800cace:	1821      	adds	r1, r4, r0
 800cad0:	428b      	cmp	r3, r1
 800cad2:	bf01      	itttt	eq
 800cad4:	6819      	ldreq	r1, [r3, #0]
 800cad6:	685b      	ldreq	r3, [r3, #4]
 800cad8:	1809      	addeq	r1, r1, r0
 800cada:	6021      	streq	r1, [r4, #0]
 800cadc:	e7ed      	b.n	800caba <_free_r+0x1e>
 800cade:	461a      	mov	r2, r3
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	b10b      	cbz	r3, 800cae8 <_free_r+0x4c>
 800cae4:	42a3      	cmp	r3, r4
 800cae6:	d9fa      	bls.n	800cade <_free_r+0x42>
 800cae8:	6811      	ldr	r1, [r2, #0]
 800caea:	1850      	adds	r0, r2, r1
 800caec:	42a0      	cmp	r0, r4
 800caee:	d10b      	bne.n	800cb08 <_free_r+0x6c>
 800caf0:	6820      	ldr	r0, [r4, #0]
 800caf2:	4401      	add	r1, r0
 800caf4:	1850      	adds	r0, r2, r1
 800caf6:	4283      	cmp	r3, r0
 800caf8:	6011      	str	r1, [r2, #0]
 800cafa:	d1e0      	bne.n	800cabe <_free_r+0x22>
 800cafc:	6818      	ldr	r0, [r3, #0]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	6053      	str	r3, [r2, #4]
 800cb02:	4408      	add	r0, r1
 800cb04:	6010      	str	r0, [r2, #0]
 800cb06:	e7da      	b.n	800cabe <_free_r+0x22>
 800cb08:	d902      	bls.n	800cb10 <_free_r+0x74>
 800cb0a:	230c      	movs	r3, #12
 800cb0c:	602b      	str	r3, [r5, #0]
 800cb0e:	e7d6      	b.n	800cabe <_free_r+0x22>
 800cb10:	6820      	ldr	r0, [r4, #0]
 800cb12:	1821      	adds	r1, r4, r0
 800cb14:	428b      	cmp	r3, r1
 800cb16:	bf04      	itt	eq
 800cb18:	6819      	ldreq	r1, [r3, #0]
 800cb1a:	685b      	ldreq	r3, [r3, #4]
 800cb1c:	6063      	str	r3, [r4, #4]
 800cb1e:	bf04      	itt	eq
 800cb20:	1809      	addeq	r1, r1, r0
 800cb22:	6021      	streq	r1, [r4, #0]
 800cb24:	6054      	str	r4, [r2, #4]
 800cb26:	e7ca      	b.n	800cabe <_free_r+0x22>
 800cb28:	bd38      	pop	{r3, r4, r5, pc}
 800cb2a:	bf00      	nop
 800cb2c:	200001cc 	.word	0x200001cc

0800cb30 <sbrk_aligned>:
 800cb30:	b570      	push	{r4, r5, r6, lr}
 800cb32:	4e0f      	ldr	r6, [pc, #60]	@ (800cb70 <sbrk_aligned+0x40>)
 800cb34:	460c      	mov	r4, r1
 800cb36:	6831      	ldr	r1, [r6, #0]
 800cb38:	4605      	mov	r5, r0
 800cb3a:	b911      	cbnz	r1, 800cb42 <sbrk_aligned+0x12>
 800cb3c:	f000 f9d6 	bl	800ceec <_sbrk_r>
 800cb40:	6030      	str	r0, [r6, #0]
 800cb42:	4621      	mov	r1, r4
 800cb44:	4628      	mov	r0, r5
 800cb46:	f000 f9d1 	bl	800ceec <_sbrk_r>
 800cb4a:	1c43      	adds	r3, r0, #1
 800cb4c:	d103      	bne.n	800cb56 <sbrk_aligned+0x26>
 800cb4e:	f04f 34ff 	mov.w	r4, #4294967295
 800cb52:	4620      	mov	r0, r4
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
 800cb56:	1cc4      	adds	r4, r0, #3
 800cb58:	f024 0403 	bic.w	r4, r4, #3
 800cb5c:	42a0      	cmp	r0, r4
 800cb5e:	d0f8      	beq.n	800cb52 <sbrk_aligned+0x22>
 800cb60:	1a21      	subs	r1, r4, r0
 800cb62:	4628      	mov	r0, r5
 800cb64:	f000 f9c2 	bl	800ceec <_sbrk_r>
 800cb68:	3001      	adds	r0, #1
 800cb6a:	d1f2      	bne.n	800cb52 <sbrk_aligned+0x22>
 800cb6c:	e7ef      	b.n	800cb4e <sbrk_aligned+0x1e>
 800cb6e:	bf00      	nop
 800cb70:	200001c8 	.word	0x200001c8

0800cb74 <_malloc_r>:
 800cb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb78:	1ccd      	adds	r5, r1, #3
 800cb7a:	f025 0503 	bic.w	r5, r5, #3
 800cb7e:	3508      	adds	r5, #8
 800cb80:	2d0c      	cmp	r5, #12
 800cb82:	bf38      	it	cc
 800cb84:	250c      	movcc	r5, #12
 800cb86:	2d00      	cmp	r5, #0
 800cb88:	4606      	mov	r6, r0
 800cb8a:	db01      	blt.n	800cb90 <_malloc_r+0x1c>
 800cb8c:	42a9      	cmp	r1, r5
 800cb8e:	d904      	bls.n	800cb9a <_malloc_r+0x26>
 800cb90:	230c      	movs	r3, #12
 800cb92:	6033      	str	r3, [r6, #0]
 800cb94:	2000      	movs	r0, #0
 800cb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc70 <_malloc_r+0xfc>
 800cb9e:	f000 f869 	bl	800cc74 <__malloc_lock>
 800cba2:	f8d8 3000 	ldr.w	r3, [r8]
 800cba6:	461c      	mov	r4, r3
 800cba8:	bb44      	cbnz	r4, 800cbfc <_malloc_r+0x88>
 800cbaa:	4629      	mov	r1, r5
 800cbac:	4630      	mov	r0, r6
 800cbae:	f7ff ffbf 	bl	800cb30 <sbrk_aligned>
 800cbb2:	1c43      	adds	r3, r0, #1
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	d158      	bne.n	800cc6a <_malloc_r+0xf6>
 800cbb8:	f8d8 4000 	ldr.w	r4, [r8]
 800cbbc:	4627      	mov	r7, r4
 800cbbe:	2f00      	cmp	r7, #0
 800cbc0:	d143      	bne.n	800cc4a <_malloc_r+0xd6>
 800cbc2:	2c00      	cmp	r4, #0
 800cbc4:	d04b      	beq.n	800cc5e <_malloc_r+0xea>
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	4639      	mov	r1, r7
 800cbca:	4630      	mov	r0, r6
 800cbcc:	eb04 0903 	add.w	r9, r4, r3
 800cbd0:	f000 f98c 	bl	800ceec <_sbrk_r>
 800cbd4:	4581      	cmp	r9, r0
 800cbd6:	d142      	bne.n	800cc5e <_malloc_r+0xea>
 800cbd8:	6821      	ldr	r1, [r4, #0]
 800cbda:	1a6d      	subs	r5, r5, r1
 800cbdc:	4629      	mov	r1, r5
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f7ff ffa6 	bl	800cb30 <sbrk_aligned>
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	d03a      	beq.n	800cc5e <_malloc_r+0xea>
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	442b      	add	r3, r5
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	f8d8 3000 	ldr.w	r3, [r8]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	bb62      	cbnz	r2, 800cc50 <_malloc_r+0xdc>
 800cbf6:	f8c8 7000 	str.w	r7, [r8]
 800cbfa:	e00f      	b.n	800cc1c <_malloc_r+0xa8>
 800cbfc:	6822      	ldr	r2, [r4, #0]
 800cbfe:	1b52      	subs	r2, r2, r5
 800cc00:	d420      	bmi.n	800cc44 <_malloc_r+0xd0>
 800cc02:	2a0b      	cmp	r2, #11
 800cc04:	d917      	bls.n	800cc36 <_malloc_r+0xc2>
 800cc06:	1961      	adds	r1, r4, r5
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	6025      	str	r5, [r4, #0]
 800cc0c:	bf18      	it	ne
 800cc0e:	6059      	strne	r1, [r3, #4]
 800cc10:	6863      	ldr	r3, [r4, #4]
 800cc12:	bf08      	it	eq
 800cc14:	f8c8 1000 	streq.w	r1, [r8]
 800cc18:	5162      	str	r2, [r4, r5]
 800cc1a:	604b      	str	r3, [r1, #4]
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f000 f82f 	bl	800cc80 <__malloc_unlock>
 800cc22:	f104 000b 	add.w	r0, r4, #11
 800cc26:	1d23      	adds	r3, r4, #4
 800cc28:	f020 0007 	bic.w	r0, r0, #7
 800cc2c:	1ac2      	subs	r2, r0, r3
 800cc2e:	bf1c      	itt	ne
 800cc30:	1a1b      	subne	r3, r3, r0
 800cc32:	50a3      	strne	r3, [r4, r2]
 800cc34:	e7af      	b.n	800cb96 <_malloc_r+0x22>
 800cc36:	6862      	ldr	r2, [r4, #4]
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	bf0c      	ite	eq
 800cc3c:	f8c8 2000 	streq.w	r2, [r8]
 800cc40:	605a      	strne	r2, [r3, #4]
 800cc42:	e7eb      	b.n	800cc1c <_malloc_r+0xa8>
 800cc44:	4623      	mov	r3, r4
 800cc46:	6864      	ldr	r4, [r4, #4]
 800cc48:	e7ae      	b.n	800cba8 <_malloc_r+0x34>
 800cc4a:	463c      	mov	r4, r7
 800cc4c:	687f      	ldr	r7, [r7, #4]
 800cc4e:	e7b6      	b.n	800cbbe <_malloc_r+0x4a>
 800cc50:	461a      	mov	r2, r3
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	42a3      	cmp	r3, r4
 800cc56:	d1fb      	bne.n	800cc50 <_malloc_r+0xdc>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	6053      	str	r3, [r2, #4]
 800cc5c:	e7de      	b.n	800cc1c <_malloc_r+0xa8>
 800cc5e:	230c      	movs	r3, #12
 800cc60:	6033      	str	r3, [r6, #0]
 800cc62:	4630      	mov	r0, r6
 800cc64:	f000 f80c 	bl	800cc80 <__malloc_unlock>
 800cc68:	e794      	b.n	800cb94 <_malloc_r+0x20>
 800cc6a:	6005      	str	r5, [r0, #0]
 800cc6c:	e7d6      	b.n	800cc1c <_malloc_r+0xa8>
 800cc6e:	bf00      	nop
 800cc70:	200001cc 	.word	0x200001cc

0800cc74 <__malloc_lock>:
 800cc74:	4801      	ldr	r0, [pc, #4]	@ (800cc7c <__malloc_lock+0x8>)
 800cc76:	f7ff bf0e 	b.w	800ca96 <__retarget_lock_acquire_recursive>
 800cc7a:	bf00      	nop
 800cc7c:	200001c4 	.word	0x200001c4

0800cc80 <__malloc_unlock>:
 800cc80:	4801      	ldr	r0, [pc, #4]	@ (800cc88 <__malloc_unlock+0x8>)
 800cc82:	f7ff bf09 	b.w	800ca98 <__retarget_lock_release_recursive>
 800cc86:	bf00      	nop
 800cc88:	200001c4 	.word	0x200001c4

0800cc8c <__sflush_r>:
 800cc8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc94:	0716      	lsls	r6, r2, #28
 800cc96:	4605      	mov	r5, r0
 800cc98:	460c      	mov	r4, r1
 800cc9a:	d454      	bmi.n	800cd46 <__sflush_r+0xba>
 800cc9c:	684b      	ldr	r3, [r1, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	dc02      	bgt.n	800cca8 <__sflush_r+0x1c>
 800cca2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	dd48      	ble.n	800cd3a <__sflush_r+0xae>
 800cca8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccaa:	2e00      	cmp	r6, #0
 800ccac:	d045      	beq.n	800cd3a <__sflush_r+0xae>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ccb4:	682f      	ldr	r7, [r5, #0]
 800ccb6:	6a21      	ldr	r1, [r4, #32]
 800ccb8:	602b      	str	r3, [r5, #0]
 800ccba:	d030      	beq.n	800cd1e <__sflush_r+0x92>
 800ccbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ccbe:	89a3      	ldrh	r3, [r4, #12]
 800ccc0:	0759      	lsls	r1, r3, #29
 800ccc2:	d505      	bpl.n	800ccd0 <__sflush_r+0x44>
 800ccc4:	6863      	ldr	r3, [r4, #4]
 800ccc6:	1ad2      	subs	r2, r2, r3
 800ccc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ccca:	b10b      	cbz	r3, 800ccd0 <__sflush_r+0x44>
 800cccc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ccce:	1ad2      	subs	r2, r2, r3
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccd4:	6a21      	ldr	r1, [r4, #32]
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b0      	blx	r6
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	d106      	bne.n	800ccee <__sflush_r+0x62>
 800cce0:	6829      	ldr	r1, [r5, #0]
 800cce2:	291d      	cmp	r1, #29
 800cce4:	d82b      	bhi.n	800cd3e <__sflush_r+0xb2>
 800cce6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd90 <__sflush_r+0x104>)
 800cce8:	40ca      	lsrs	r2, r1
 800ccea:	07d6      	lsls	r6, r2, #31
 800ccec:	d527      	bpl.n	800cd3e <__sflush_r+0xb2>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	6062      	str	r2, [r4, #4]
 800ccf2:	04d9      	lsls	r1, r3, #19
 800ccf4:	6922      	ldr	r2, [r4, #16]
 800ccf6:	6022      	str	r2, [r4, #0]
 800ccf8:	d504      	bpl.n	800cd04 <__sflush_r+0x78>
 800ccfa:	1c42      	adds	r2, r0, #1
 800ccfc:	d101      	bne.n	800cd02 <__sflush_r+0x76>
 800ccfe:	682b      	ldr	r3, [r5, #0]
 800cd00:	b903      	cbnz	r3, 800cd04 <__sflush_r+0x78>
 800cd02:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd06:	602f      	str	r7, [r5, #0]
 800cd08:	b1b9      	cbz	r1, 800cd3a <__sflush_r+0xae>
 800cd0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd0e:	4299      	cmp	r1, r3
 800cd10:	d002      	beq.n	800cd18 <__sflush_r+0x8c>
 800cd12:	4628      	mov	r0, r5
 800cd14:	f7ff fec2 	bl	800ca9c <_free_r>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd1c:	e00d      	b.n	800cd3a <__sflush_r+0xae>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	4628      	mov	r0, r5
 800cd22:	47b0      	blx	r6
 800cd24:	4602      	mov	r2, r0
 800cd26:	1c50      	adds	r0, r2, #1
 800cd28:	d1c9      	bne.n	800ccbe <__sflush_r+0x32>
 800cd2a:	682b      	ldr	r3, [r5, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d0c6      	beq.n	800ccbe <__sflush_r+0x32>
 800cd30:	2b1d      	cmp	r3, #29
 800cd32:	d001      	beq.n	800cd38 <__sflush_r+0xac>
 800cd34:	2b16      	cmp	r3, #22
 800cd36:	d11e      	bne.n	800cd76 <__sflush_r+0xea>
 800cd38:	602f      	str	r7, [r5, #0]
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	e022      	b.n	800cd84 <__sflush_r+0xf8>
 800cd3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd42:	b21b      	sxth	r3, r3
 800cd44:	e01b      	b.n	800cd7e <__sflush_r+0xf2>
 800cd46:	690f      	ldr	r7, [r1, #16]
 800cd48:	2f00      	cmp	r7, #0
 800cd4a:	d0f6      	beq.n	800cd3a <__sflush_r+0xae>
 800cd4c:	0793      	lsls	r3, r2, #30
 800cd4e:	680e      	ldr	r6, [r1, #0]
 800cd50:	bf08      	it	eq
 800cd52:	694b      	ldreq	r3, [r1, #20]
 800cd54:	600f      	str	r7, [r1, #0]
 800cd56:	bf18      	it	ne
 800cd58:	2300      	movne	r3, #0
 800cd5a:	eba6 0807 	sub.w	r8, r6, r7
 800cd5e:	608b      	str	r3, [r1, #8]
 800cd60:	f1b8 0f00 	cmp.w	r8, #0
 800cd64:	dde9      	ble.n	800cd3a <__sflush_r+0xae>
 800cd66:	6a21      	ldr	r1, [r4, #32]
 800cd68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd6a:	4643      	mov	r3, r8
 800cd6c:	463a      	mov	r2, r7
 800cd6e:	4628      	mov	r0, r5
 800cd70:	47b0      	blx	r6
 800cd72:	2800      	cmp	r0, #0
 800cd74:	dc08      	bgt.n	800cd88 <__sflush_r+0xfc>
 800cd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd7e:	81a3      	strh	r3, [r4, #12]
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	4407      	add	r7, r0
 800cd8a:	eba8 0800 	sub.w	r8, r8, r0
 800cd8e:	e7e7      	b.n	800cd60 <__sflush_r+0xd4>
 800cd90:	20400001 	.word	0x20400001

0800cd94 <_fflush_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	690b      	ldr	r3, [r1, #16]
 800cd98:	4605      	mov	r5, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	b913      	cbnz	r3, 800cda4 <_fflush_r+0x10>
 800cd9e:	2500      	movs	r5, #0
 800cda0:	4628      	mov	r0, r5
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	b118      	cbz	r0, 800cdae <_fflush_r+0x1a>
 800cda6:	6a03      	ldr	r3, [r0, #32]
 800cda8:	b90b      	cbnz	r3, 800cdae <_fflush_r+0x1a>
 800cdaa:	f7ff fc8f 	bl	800c6cc <__sinit>
 800cdae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0f3      	beq.n	800cd9e <_fflush_r+0xa>
 800cdb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cdb8:	07d0      	lsls	r0, r2, #31
 800cdba:	d404      	bmi.n	800cdc6 <_fflush_r+0x32>
 800cdbc:	0599      	lsls	r1, r3, #22
 800cdbe:	d402      	bmi.n	800cdc6 <_fflush_r+0x32>
 800cdc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdc2:	f7ff fe68 	bl	800ca96 <__retarget_lock_acquire_recursive>
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	4621      	mov	r1, r4
 800cdca:	f7ff ff5f 	bl	800cc8c <__sflush_r>
 800cdce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cdd0:	07da      	lsls	r2, r3, #31
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	d4e4      	bmi.n	800cda0 <_fflush_r+0xc>
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	059b      	lsls	r3, r3, #22
 800cdda:	d4e1      	bmi.n	800cda0 <_fflush_r+0xc>
 800cddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdde:	f7ff fe5b 	bl	800ca98 <__retarget_lock_release_recursive>
 800cde2:	e7dd      	b.n	800cda0 <_fflush_r+0xc>

0800cde4 <__swhatbuf_r>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	460c      	mov	r4, r1
 800cde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdec:	2900      	cmp	r1, #0
 800cdee:	b096      	sub	sp, #88	@ 0x58
 800cdf0:	4615      	mov	r5, r2
 800cdf2:	461e      	mov	r6, r3
 800cdf4:	da0d      	bge.n	800ce12 <__swhatbuf_r+0x2e>
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cdfc:	f04f 0100 	mov.w	r1, #0
 800ce00:	bf14      	ite	ne
 800ce02:	2340      	movne	r3, #64	@ 0x40
 800ce04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce08:	2000      	movs	r0, #0
 800ce0a:	6031      	str	r1, [r6, #0]
 800ce0c:	602b      	str	r3, [r5, #0]
 800ce0e:	b016      	add	sp, #88	@ 0x58
 800ce10:	bd70      	pop	{r4, r5, r6, pc}
 800ce12:	466a      	mov	r2, sp
 800ce14:	f000 f848 	bl	800cea8 <_fstat_r>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	dbec      	blt.n	800cdf6 <__swhatbuf_r+0x12>
 800ce1c:	9901      	ldr	r1, [sp, #4]
 800ce1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce26:	4259      	negs	r1, r3
 800ce28:	4159      	adcs	r1, r3
 800ce2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce2e:	e7eb      	b.n	800ce08 <__swhatbuf_r+0x24>

0800ce30 <__smakebuf_r>:
 800ce30:	898b      	ldrh	r3, [r1, #12]
 800ce32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce34:	079d      	lsls	r5, r3, #30
 800ce36:	4606      	mov	r6, r0
 800ce38:	460c      	mov	r4, r1
 800ce3a:	d507      	bpl.n	800ce4c <__smakebuf_r+0x1c>
 800ce3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce40:	6023      	str	r3, [r4, #0]
 800ce42:	6123      	str	r3, [r4, #16]
 800ce44:	2301      	movs	r3, #1
 800ce46:	6163      	str	r3, [r4, #20]
 800ce48:	b003      	add	sp, #12
 800ce4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce4c:	ab01      	add	r3, sp, #4
 800ce4e:	466a      	mov	r2, sp
 800ce50:	f7ff ffc8 	bl	800cde4 <__swhatbuf_r>
 800ce54:	9f00      	ldr	r7, [sp, #0]
 800ce56:	4605      	mov	r5, r0
 800ce58:	4639      	mov	r1, r7
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f7ff fe8a 	bl	800cb74 <_malloc_r>
 800ce60:	b948      	cbnz	r0, 800ce76 <__smakebuf_r+0x46>
 800ce62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce66:	059a      	lsls	r2, r3, #22
 800ce68:	d4ee      	bmi.n	800ce48 <__smakebuf_r+0x18>
 800ce6a:	f023 0303 	bic.w	r3, r3, #3
 800ce6e:	f043 0302 	orr.w	r3, r3, #2
 800ce72:	81a3      	strh	r3, [r4, #12]
 800ce74:	e7e2      	b.n	800ce3c <__smakebuf_r+0xc>
 800ce76:	89a3      	ldrh	r3, [r4, #12]
 800ce78:	6020      	str	r0, [r4, #0]
 800ce7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	9b01      	ldr	r3, [sp, #4]
 800ce82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce86:	b15b      	cbz	r3, 800cea0 <__smakebuf_r+0x70>
 800ce88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f000 f81d 	bl	800cecc <_isatty_r>
 800ce92:	b128      	cbz	r0, 800cea0 <__smakebuf_r+0x70>
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	f023 0303 	bic.w	r3, r3, #3
 800ce9a:	f043 0301 	orr.w	r3, r3, #1
 800ce9e:	81a3      	strh	r3, [r4, #12]
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	431d      	orrs	r5, r3
 800cea4:	81a5      	strh	r5, [r4, #12]
 800cea6:	e7cf      	b.n	800ce48 <__smakebuf_r+0x18>

0800cea8 <_fstat_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d07      	ldr	r5, [pc, #28]	@ (800cec8 <_fstat_r+0x20>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	602b      	str	r3, [r5, #0]
 800ceb6:	f7ff fa5e 	bl	800c376 <_fstat>
 800ceba:	1c43      	adds	r3, r0, #1
 800cebc:	d102      	bne.n	800cec4 <_fstat_r+0x1c>
 800cebe:	682b      	ldr	r3, [r5, #0]
 800cec0:	b103      	cbz	r3, 800cec4 <_fstat_r+0x1c>
 800cec2:	6023      	str	r3, [r4, #0]
 800cec4:	bd38      	pop	{r3, r4, r5, pc}
 800cec6:	bf00      	nop
 800cec8:	200001c0 	.word	0x200001c0

0800cecc <_isatty_r>:
 800cecc:	b538      	push	{r3, r4, r5, lr}
 800cece:	4d06      	ldr	r5, [pc, #24]	@ (800cee8 <_isatty_r+0x1c>)
 800ced0:	2300      	movs	r3, #0
 800ced2:	4604      	mov	r4, r0
 800ced4:	4608      	mov	r0, r1
 800ced6:	602b      	str	r3, [r5, #0]
 800ced8:	f7ff fa5d 	bl	800c396 <_isatty>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_isatty_r+0x1a>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_isatty_r+0x1a>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	200001c0 	.word	0x200001c0

0800ceec <_sbrk_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4d06      	ldr	r5, [pc, #24]	@ (800cf08 <_sbrk_r+0x1c>)
 800cef0:	2300      	movs	r3, #0
 800cef2:	4604      	mov	r4, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	602b      	str	r3, [r5, #0]
 800cef8:	f7ff fa66 	bl	800c3c8 <_sbrk>
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d102      	bne.n	800cf06 <_sbrk_r+0x1a>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	b103      	cbz	r3, 800cf06 <_sbrk_r+0x1a>
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	200001c0 	.word	0x200001c0

0800cf0c <_init>:
 800cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0e:	bf00      	nop
 800cf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf12:	bc08      	pop	{r3}
 800cf14:	469e      	mov	lr, r3
 800cf16:	4770      	bx	lr

0800cf18 <_fini>:
 800cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1a:	bf00      	nop
 800cf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf1e:	bc08      	pop	{r3}
 800cf20:	469e      	mov	lr, r3
 800cf22:	4770      	bx	lr
